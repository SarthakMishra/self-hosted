---
# Complete Server Setup Playbook
# Runs system preparation, reboots, then Docker setup, then local network services

- name: Complete Server Setup
  hosts: docker_servers
  become: true
  gather_facts: false  # We'll gather facts after connection is established
  
  vars_files:
    - ../group_vars/vault.yml
    - ../group_vars/all.yml
    - ../group_vars/docker.yml
    - ../group_vars/mergerfs.yml
    - ../group_vars/samba.yml
    - ../group_vars/nginx_proxy.yml
    - ../group_vars/dnsmasq.yml
    - ../group_vars/cloudflared.yml
    - ../group_vars/netdata.yml
    
  pre_tasks:
    # Bootstrap Connection Verification
    - name: Verify bootstrap connection to fresh Ubuntu server
      block:
        - name: Test initial connection with bootstrap credentials
          ansible.builtin.setup:
          register: bootstrap_connection_test
          
        - name: Bootstrap connection successful
          ansible.builtin.debug:
            msg: 
              - "✅ Connected successfully to fresh Ubuntu server"
              - "Host: {{ ansible_host }}"
              - "User: {{ ansible_user }}"
              - "Method: Password-based authentication (bootstrap)"
              - ""
              - "This connection will be secured during setup process"
              
      rescue:
        - name: Bootstrap connection failed
          ansible.builtin.fail:
            msg: |
              ❌ Cannot connect to Ubuntu server with bootstrap credentials:
              
              Host: {{ ansible_host }}
              User: {{ ansible_user }}
              
              Please check:
              1. Server is powered on and network accessible
              2. IP address in vault.yml is correct (vault_ansible_init_host)
              3. Username is correct (vault_ansible_init_user) 
              4. Password is correct (vault_ansible_init_password)
              5. SSH service is running on server
              6. No firewall blocking SSH access from this machine
              
              💡 Remember: Do NOT set up SSH keys during Ubuntu installation!
                 The playbook will configure secure SSH access automatically.
          
      tags: always
      
    # Now gather facts with established connection
    - name: Gather system facts
      ansible.builtin.setup:
      tags: always

    - name: Display connection status
      ansible.builtin.debug:
        msg:
          - "🔗 Connection established:"
          - "   Method: Password-based bootstrap"
          - "   User: {{ ansible_user }}"
          - "   Host: {{ ansible_host }}"
          - "   Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
      tags: always

    # Phase 0: SSH Security Bootstrap (Immediate)
    - name: Run SSH security bootstrap
      block:
        - name: Enable passwordless sudo for bootstrap user
          ansible.builtin.lineinfile:
            path: /etc/sudoers.d/bootstrap-user
            line: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
            create: true
            mode: '0440'
            validate: 'visudo -cf %s'
          tags:
            - ssh_bootstrap
            - sudo_setup

        - name: Create admin user for final access
          ansible.builtin.user:
            name: "{{ vault_ansible_user }}"
            shell: /bin/bash
            home: "/home/{{ vault_ansible_user }}"
            create_home: true
            groups: sudo
            append: true
            state: present
          tags:
            - ssh_bootstrap
            - admin_user

        - name: Configure passwordless sudo for admin user
          ansible.builtin.lineinfile:
            path: /etc/sudoers.d/admin-user
            line: "{{ vault_ansible_user }} ALL=(ALL) NOPASSWD:ALL"
            create: true
            mode: '0440'
            validate: 'visudo -cf %s'
          tags:
            - ssh_bootstrap
            - admin_user

        - name: Create admin user .ssh directory
          ansible.builtin.file:
            path: "/home/{{ vault_ansible_user }}/.ssh"
            state: directory
            owner: "{{ vault_ansible_user }}"
            group: "{{ vault_ansible_user }}"
            mode: '0700'
          tags:
            - ssh_bootstrap
            - admin_user

        - name: Install SSH public key for admin user
          ansible.builtin.authorized_key:
            user: "{{ vault_ansible_user }}"
            key: "{{ vault_admin_ssh_public_key }}"
            state: present
          when: vault_admin_ssh_public_key is defined
          tags:
            - ssh_bootstrap
            - ssh_keys

        - name: Disable SSH password authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            state: present
          loop:
            - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
            - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
            - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
          register: ssh_config_updated
          tags:
            - ssh_bootstrap
            - ssh_hardening

        - name: Restart SSH service to apply security settings
          ansible.builtin.systemd:
            name: ssh
            state: restarted
          when: ssh_config_updated is changed
          tags:
            - ssh_bootstrap
            - ssh_hardening

        - name: Display SSH security status
          ansible.builtin.debug:
            msg:
              - "✅ SSH Security Bootstrap Completed"
              - "   Password authentication: DISABLED"
              - "   SSH keys installed for admin user: {{ vault_ansible_user }}"
              - "   Passwordless sudo enabled for setup"
          tags:
            - ssh_bootstrap

      tags:
        - ssh_bootstrap
        - phase0

    - name: Display complete setup banner
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "🚀 COMPLETE SERVER SETUP"
          - "=================================================="
          - ""
          - "Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "This will:"
          - "1. System hardening and preparation"
          - "2. Reboot server"
          - "3. Docker installation and configuration"
          - "4. MergerFS storage pool setup (interactive)"
          - "5. Samba file sharing setup (interactive password)"
          - "6. Nginx-proxy for local .home domains"
          - "7. DNSmasq for local DNS resolution"
          - "8. Cloudflared for secure external access"
          - "9. Netdata monitoring system"
          - ""
          - "⚠️  Server will reboot during this process"
          - "🔒 SSH access will be restricted to admin user"
          - "🌐 Tailscale will be configured for secure access"
          - ""
      tags: always

    - name: Check minimum system requirements
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_major_version | int >= 20
          - ansible_memtotal_mb >= 1024
          - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first > 5000000000
        fail_msg: "Requirements: Ubuntu 20.04+, 1GB RAM, 5GB disk space"
        success_msg: "System requirements met"
      tags: always

  tasks:
    # Phase 1: System Preparation
    - name: Run system preparation roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - system_update
        - user_management
        - tailscale
        - firewall
        - ssh_hardening
        - kernel_hardening
        - logging
        - validation
      tags:
        - system_preparation
        - phase1

    - name: Switch to secure admin user connection via Tailscale
      block:
        - name: Update connection to use final admin credentials
          ansible.builtin.set_fact:
            ansible_user: "{{ vault_ansible_user }}"
            ansible_host: "{{ vault_ansible_host }}"
            ansible_ssh_pass: "{{ omit }}"  # Remove password, use SSH keys only
            connection_method: "secure_admin_tailscale"
          
        - name: Display connection transition
          ansible.builtin.debug:
            msg:
              - "🔄 Transitioning to secure connection:"
              - "   From: {{ vault_ansible_init_user }}@{{ vault_ansible_init_host }} (password-based)"
              - "   To: {{ vault_ansible_user }}@{{ vault_ansible_host }} (SSH keys via Tailscale MagicDNS)"
              - "   ✅ SSH hardening applied"
              - "   ✅ Tailscale VPN active"
              - "   ✅ MagicDNS enabled"
            
      tags:
        - system_preparation
        - phase1

    - name: Display pre-reboot status
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "✅ SYSTEM PREPARATION COMPLETED"
          - "================================================================"
          - ""
          - "System hardening complete. Rebooting server to apply changes..."
          - "Server will restart and Docker setup will continue automatically."
          - "Post-reboot connection: {{ vault_ansible_user }}@{{ vault_ansible_host }}"
          - ""
      tags:
        - system_preparation
        - phase1

    # Phase 2: Reboot
    - name: Reboot server to apply system changes
      ansible.builtin.reboot:
        reboot_timeout: 600
        connect_timeout: 30
        test_command: uptime
        msg: "Rebooting to apply system preparation changes"
      tags:
        - reboot
        - phase2

    - name: Wait for server to be fully ready
      ansible.builtin.wait_for_connection:
        timeout: 300
        delay: 30
      tags:
        - reboot
        - phase2

    - name: Verify server is back online
      ansible.builtin.setup:
      tags:
        - reboot
        - phase2

    - name: Display post-reboot status
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🔄 SERVER REBOOT COMPLETED"
          - "================================================================"
          - ""
          - "Server is back online. Starting Docker installation..."
          - "Connection: {{ ansible_user }}@{{ ansible_host }}"
          - ""
      tags:
        - reboot
        - phase2

    # Phase 3: Docker Setup
    - name: Run Docker installation roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - docker_installation
        - docker_configuration
        - docker_production
        - docker_validation
      tags:
        - docker_setup
        - phase3

    - name: Display Docker setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🐳 DOCKER SETUP COMPLETED"
          - "================================================================"
          - ""
          - "Docker installation complete. Setting up storage pool..."
          - ""
      tags:
        - docker_setup
        - phase3

    # Phase 4: MergerFS Storage Pool Setup
    - name: Run MergerFS storage pool setup
      ansible.builtin.include_role:
        name: mergerfs
      tags:
        - mergerfs_setup
        - phase4

    # Phase 5: Samba File Sharing Setup
    - name: Run Samba file sharing setup
      ansible.builtin.include_role:
        name: samba
      tags:
        - samba_setup
        - phase5

    - name: Display MergerFS setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "💽 MERGERFS STORAGE POOL SETUP COMPLETED"
          - "================================================================"
          - ""
          - "Storage pool configured. Setting up local networking..."
          - ""
      tags:
        - mergerfs_setup
        - phase4

    # Phase 6: Local Network Setup (Nginx-proxy + DNSmasq)
    - name: Run local network services setup
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - nginx_proxy
        - dnsmasq
      tags:
        - local_network_setup
        - phase6

    - name: Display local network setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🌐 LOCAL NETWORK SETUP COMPLETED"
          - "================================================================"
          - ""
          - "✅ Nginx-proxy running for .{{ domain_suffix }} domains"
          - "✅ DNSmasq providing local DNS resolution"
          - ""
          - "Setting up secure external access..."
          - ""
      tags:
        - local_network_setup
        - phase5

    # Phase 7: Cloudflared Setup
    - name: Run Cloudflared tunnel setup
      ansible.builtin.include_role:
        name: cloudflared
      tags:
        - cloudflared_setup
        - phase7

    - name: Display Cloudflared setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "☁️  CLOUDFLARED TUNNEL SETUP COMPLETED"
          - "================================================================"
          - ""
          - "Cloudflared tunnel configured. Installing monitoring system..."
          - ""
      tags:
        - cloudflared_setup
        - phase6

    # Phase 8: Monitoring Setup
    - name: Run monitoring system setup
      ansible.builtin.include_role:
        name: netdata
      tags:
        - monitoring_setup
        - phase8

  post_tasks:
    - name: Complete setup finished
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🎉 COMPLETE SERVER SETUP FINISHED!"
          - "================================================================"
          - ""
          - "✅ System hardening applied"
          - "✅ Server rebooted with latest changes"
          - "✅ Docker installed and configured"
          - "✅ MergerFS storage pool configured"
          - "✅ Samba file sharing configured"
          - "✅ Nginx-proxy for local .{{ domain_suffix }} domains"
          - "✅ DNSmasq for local DNS resolution"
          - "✅ Cloudflared tunnel for external access"
          - "✅ Netdata monitoring installed"
          - "✅ Production settings applied"
          - ""
          - "🔒 SSH Access (via Tailscale MagicDNS):"
          - "   ssh {{ vault_ansible_user }}@{{ vault_ansible_host }}"
          - ""
          - "🔧 Management Commands:"
          - "   Docker Status: /usr/local/bin/docker-status"
          - "   Docker Cleanup: /usr/local/bin/docker-cleanup"
          - "   Stack Directory: {{ docker_stack_root }}"
          - "   Storage Pool: {{ mergerfs_pool_path | default('/srv/storage') }}"
          - "   Nginx-proxy Directory: {{ nginx_proxy_root_dir }}"
          - "   Cloudflared Directory: {{ cloudflared_root_dir }}"
          - ""
          - "💽 Storage Pool:"
          - "   MergerFS Pool: {{ mergerfs_pool_path | default('/srv/storage') }}"
          - "   Network Share: \\\\{{ ansible_default_ipv4.address }}\\storage"
          - "   Check Status: df -h {{ mergerfs_pool_path | default('/srv/storage') }}"
          - "   Balance Pool: mergerfs.balance {{ mergerfs_pool_path | default('/srv/storage') }}"
          - ""
          - "🌐 Network Services:"
          - "   Local DNS: {{ ansible_default_ipv4.address }}:{{ dnsmasq_port }}"
          - "   External Domain: {{ cloudflared_external_domain }}"
          - ""
          - "📊 Monitoring:"
          - "   Netdata: http://{{ vault_ansible_host }}:{{ netdata_port }}"
          - ""
          - "🚀 Your home server is ready!"
          - "   Storage: {{ mergerfs_pool_path | default('/srv/storage') }} unified pool available"
          - "   Local Access: Add VIRTUAL_HOST=service.{{ domain_suffix }} to containers"
          - "   External Access: Add cloudflare labels for automatic tunnel routing"
          - "   No ports 80/443 exposed - all external traffic via Cloudflare tunnel"
          - ""
      tags: always 