# Prefect Workflow Orchestration Environment Configuration
# Copy this file to .env and customize for your installation

# ==============================================
# DOMAIN CONFIGURATION
# ==============================================

# The domain where Prefect UI will be accessible
# Example: prefect.yourdomain.com
PREFECT_DOMAIN=prefect.example.com

# ==============================================
# DATABASE CONFIGURATION
# ==============================================

# PostgreSQL database configuration
# These credentials will be used for the Prefect database
POSTGRES_DB=prefect
POSTGRES_USER=prefect_user
POSTGRES_PASSWORD=your_secure_database_password

# Optional: PostgreSQL initialization arguments
# Default: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

# ==============================================
# REDIS CONFIGURATION
# ==============================================

# Redis memory limit (for message queue and caching)
# Examples: 256mb, 512mb, 1gb
REDIS_MAX_MEMORY=256mb

# ==============================================
# PREFECT SERVER CONFIGURATION
# ==============================================

# Enable/disable analytics collection
# Set to false for privacy-focused deployments
PREFECT_ANALYTICS_ENABLED=false

# Enable/disable telemetry data collection
# Set to false for privacy-focused deployments
PREFECT_TELEMETRY_ENABLED=false

# ==============================================
# WORKER CONFIGURATION
# ==============================================

# Worker pool name for job execution
# This pool will be created automatically if it doesn't exist
PREFECT_WORKER_POOL=local-pool

# Worker prefetch seconds (how far ahead to look for work)
# Default: 10 seconds
PREFECT_WORKER_PREFETCH_SECONDS=10

# Work queue name for the worker
# Default: default
PREFECT_WORKER_WORK_QUEUE_NAME=default

# ==============================================
# ADVANCED CONFIGURATION (OPTIONAL)
# ==============================================

# Custom encryption key for sensitive data
# Auto-generated if not set, but you can set your own
# PREFECT_ENCRYPTION_KEY=your_custom_encryption_key

# API key for external integrations
# Generate with: prefect api-key create --name "your-key-name"
# PREFECT_API_KEY=your_api_key_here

# Log level for Prefect services
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# PREFECT_LOG_LEVEL=INFO

# Maximum concurrent flow runs
# PREFECT_MAX_CONCURRENT_FLOW_RUNS=10

# Flow run timeout (in seconds)
# PREFECT_FLOW_RUN_TIMEOUT=3600

# Task run timeout (in seconds)
# PREFECT_TASK_RUN_TIMEOUT=1800

# ==============================================
# SECURITY CONFIGURATION (OPTIONAL)
# ==============================================

# API key for Traefik authentication (if using API key middleware)
# This key must match the one configured in Traefik's middlewares.yml
PREFECT_API_KEY=your-very-secret-api-key

# Client custom headers for API authentication (JSON format)
# This allows the Prefect client to authenticate with Traefik's API key middleware
PREFECT_CLIENT_CUSTOM_HEADERS={"Authorization": "Bearer your-very-secret-api-key"}

# Enable authentication (requires additional setup)
# PREFECT_AUTH_ENABLED=false

# Session timeout (in minutes)
# PREFECT_SESSION_TIMEOUT=1440

# ==============================================
# MONITORING & METRICS (OPTIONAL)
# ==============================================

# Enable metrics collection
# PREFECT_METRICS_ENABLED=false

# Metrics endpoint port
# PREFECT_METRICS_PORT=9090

# ==============================================
# STORAGE CONFIGURATION (OPTIONAL)
# ==============================================

# Result storage backend
# Options: file, s3, gcs, azure
# PREFECT_RESULT_STORAGE=file

# Result storage path (for file backend)
# PREFECT_RESULT_STORAGE_PATH=/tmp/prefect-results

# ==============================================
# EXAMPLE VALUES FOR DIFFERENT SETUPS
# ==============================================

# For a simple personal setup:
# PREFECT_DOMAIN=prefect.yourdomain.com
# PREFECT_ANALYTICS_ENABLED=false
# PREFECT_TELEMETRY_ENABLED=false
# PREFECT_WORKER_POOL=personal-pool
# REDIS_MAX_MEMORY=256mb

# For a team/production setup:
# PREFECT_DOMAIN=workflows.company.com
# PREFECT_ANALYTICS_ENABLED=true
# PREFECT_TELEMETRY_ENABLED=true
# PREFECT_WORKER_POOL=production-pool
# PREFECT_MAX_CONCURRENT_FLOW_RUNS=50
# REDIS_MAX_MEMORY=1gb

# For development/testing:
# PREFECT_DOMAIN=prefect.localhost
# PREFECT_ANALYTICS_ENABLED=false
# PREFECT_TELEMETRY_ENABLED=false
# PREFECT_LOG_LEVEL=DEBUG
# REDIS_MAX_MEMORY=128mb

# ==============================================
# SECURITY NOTES
# ==============================================

# 1. Use strong, unique database passwords
# 2. Consider enabling authentication for production
# 3. Regularly backup your database
# 4. Monitor resource usage (CPU, memory, disk)
# 5. Keep Prefect updated to latest stable version
# 6. Use HTTPS in production (handled by Traefik)

# ==============================================
# FIRST-TIME SETUP
# ==============================================

# After deployment:
# 1. Visit https://your-domain.com
# 2. Create your first flow deployment
# 3. Set up work queues and pools as needed
# 4. Configure external integrations (APIs, databases, etc.)
# 5. Set up monitoring and alerting

# ==============================================
# USEFUL COMMANDS
# ==============================================

# Connect to Prefect CLI:
# prefect config set PREFECT_API_URL=https://your-domain.com/api

# Create a new work queue:
# prefect work-queue create "my-queue"

# Deploy a flow:
# prefect deploy --name "my-flow" --work-queue-name "my-queue"

# Start a worker:
# prefect worker start --pool "my-pool" --work-queue "my-queue"

# ==============================================
# TROUBLESHOOTING
# ==============================================

# Check service logs:
# docker-compose logs prefect-server
# docker-compose logs prefect-worker
# docker-compose logs prefect-db
# docker-compose logs prefect-redis

# Check health status:
# docker-compose ps

# Restart services:
# docker-compose restart prefect-server
# docker-compose restart prefect-worker 