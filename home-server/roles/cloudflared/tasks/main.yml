---
# Cloudflared Role - Automated External Access
# Provides secure tunnel to Cloudflare with automatic service discovery

- name: Create cloudflared directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0755'
  loop:
    - "{{ cloudflared_root_dir }}"
    - "{{ cloudflared_config_dir }}"
    - "{{ cloudflared_credentials_dir }}"
  tags:
    - cloudflared
    - directories

- name: Check if cloudflared tunnel exists
  ansible.builtin.stat:
    path: "{{ cloudflared_credentials_dir }}/{{ cloudflared_tunnel_id }}.json"
  register: tunnel_credentials
  tags:
    - cloudflared
    - validation

- name: Display tunnel setup requirements
  ansible.builtin.debug:
    msg:
      - "üîß CLOUDFLARE TUNNEL SETUP REQUIRED"
      - ""
      - "Manual setup required for first-time deployment:"
      - "1. Create Cloudflare tunnel: cloudflared tunnel create {{ cloudflared_tunnel_name }}"
      - "2. Copy credentials to: {{ cloudflared_credentials_dir }}/"
      - "3. Update vault.yml with tunnel ID and API credentials"
      - "4. Re-run playbook to complete automated setup"
      - ""
  when: not tunnel_credentials.stat.exists
  tags:
    - cloudflared
    - validation

- name: Create cloudflared docker-compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ cloudflared_root_dir }}/docker-compose.yml"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0644'
    backup: true
  notify: restart cloudflared
  tags:
    - cloudflared
    - configuration

- name: Create cloudflared environment file
  ansible.builtin.template:
    src: env.j2
    dest: "{{ cloudflared_root_dir }}/.env"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'
    backup: true
  notify: restart cloudflared
  tags:
    - cloudflared
    - configuration

- name: Create cloudflared tunnel configuration
  ansible.builtin.template:
    src: config.yml.j2
    dest: "{{ cloudflared_config_dir }}/config.yml"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'
    backup: true
  notify: restart cloudflared
  when: tunnel_credentials.stat.exists
  tags:
    - cloudflared
    - configuration

- name: Start cloudflared services
  become_user: "{{ admin_username }}"
  community.docker.docker_compose_v2:
    project_src: "{{ cloudflared_root_dir }}"
    state: present
    remove_orphans: true
  when: tunnel_credentials.stat.exists
  tags:
    - cloudflared
    - start

- name: Verify cloudflared connectivity
  ansible.builtin.uri:
    url: "https://{{ cloudflared_external_domain }}"
    method: GET
    status_code: [200, 503, 404]  # 503/404 expected if no services configured yet
  retries: 3
  delay: 10
  when: tunnel_credentials.stat.exists
  failed_when: false
  register: cloudflared_test
  tags:
    - cloudflared
    - validation

- name: Display cloudflared setup status
  ansible.builtin.debug:
    msg:
      - "================================================================"
      - "‚òÅÔ∏è  CLOUDFLARED SETUP COMPLETED"
      - "================================================================"
      - ""
      - "‚úÖ Cloudflared tunnel is running"
      - "‚úÖ Automated service discovery enabled"
      - "‚úÖ External domain: {{ cloudflared_external_domain }}"
      - ""
      - "üîß Configuration:"
      - "   Tunnel ID: {{ cloudflared_tunnel_id }}"
      - "   Manager: Automatic via Docker labels"
      - "   Default Service: nginx-proxy"
      - ""
      - "üìù Adding External Services:"
      - "   Add these labels to containers for external access:"
      - "   - cloudflare.zero_trust.access.tunnel.public_hostname=service.{{ cloudflared_external_domain }}"
      - "   - cloudflare.zero_trust.access.tunnel.service=http://container:port"
      - ""
      - "üåê Access Methods:"
      - "   Local: http://service.{{ domain_suffix }}"
      - "   External: https://service.{{ cloudflared_external_domain }}"
      - ""
  when: tunnel_credentials.stat.exists
  tags:
    - cloudflared
    - status 