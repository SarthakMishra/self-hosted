---
# Main System Preparation Playbook
# Orchestrates complete system preparation for Docker Swarm deployment

- name: System Preparation for Docker Swarm
  hosts: all
  become: true
  gather_facts: true
  
  vars:
    # Safety checkpoint for critical operations
    safety_checkpoint: true
    
  pre_tasks:
    - name: Display system preparation banner
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "🚀 SYSTEM PREPARATION FOR DOCKER SWARM"
          - "=================================================="
          - ""
          - "Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "Node Type: {{ node_type | default('unknown') }}"
          - "Environment: {{ environment | default('undefined') }}"
          - "Admin User: {{ admin_username }}"
          - ""
          - "⚠️  This will apply security hardening and may require reboot"
          - "🔒 SSH access will be restricted to admin user only"
          - "🌐 Tailscale will be configured for secure access"
          - ""
      tags: always

    - name: Verify operating system compatibility
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_major_version | int >= 20
        fail_msg: "This playbook requires Ubuntu 20.04 or later"
        success_msg: "Operating system compatibility verified: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      tags: always

    - name: Check minimum system requirements
      ansible.builtin.assert:
        that:
          - ansible_memtotal_mb >= 1024
          - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first > 5000000000
        fail_msg: "Minimum requirements: 1GB RAM, 5GB disk space"
        success_msg: "System requirements met: {{ ansible_memtotal_mb }}MB RAM, {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first / 1024 / 1024 / 1024) | round(1) }}GB disk"
      tags: always

  roles:
    - role: system_update
      tags: 
        - system_update
        - phase1
      
    - role: user_management  
      tags:
        - user_management
        - phase1
        
    - role: tailscale
      tags:
        - tailscale
        - phase2
        
  post_tasks:
    - name: Critical Security Checkpoint
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🚨 CRITICAL SECURITY CHECKPOINT 🚨"
          - "================================================================"
          - ""
          - "Before proceeding with firewall lockdown:"
          - "✅ Admin user created: {{ admin_username }}"
          - "✅ Tailscale configured: {{ tailscale_ip | default('Check manually') }}"
          - ""
          - "🔒 NEXT PHASE WILL:"
          - "• Configure firewall (block direct access)"
          - "• Disable root SSH access"
          - "• Apply security hardening"
          - ""
          - "⚠️  IMPORTANT: Verify Tailscale connectivity before continuing!"
          - "Test: ssh {{ admin_username }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
          - ""
      when: safety_checkpoint | default(true)
      tags: 
        - checkpoint
        - phase2

    - name: Wait for user confirmation (if interactive)
      ansible.builtin.pause:
        prompt: |
          
          ⚠️  SAFETY CHECKPOINT ⚠️
          
          Have you verified that:
          1. Admin user SSH access works via Tailscale?
          2. You can connect from another device on your Tailscale network?
          
          Type 'continue' to proceed with security lockdown, or Ctrl+C to abort
      register: checkpoint_response
      when: 
        - safety_checkpoint | default(true)
        - ansible_verbosity >= 1
      tags: 
        - checkpoint
        - phase2

    - name: Continue with security hardening
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - firewall
        - ssh_hardening
        - kernel_hardening
        - time_sync
        - logging
      tags:
        - security_hardening
        - phase3

    - name: Final validation
      ansible.builtin.include_role:
        name: validation
      tags:
        - validation
        - phase4

    - name: System preparation complete
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🎉 SYSTEM PREPARATION COMPLETED SUCCESSFULLY!"
          - "================================================================"
          - ""
          - "✅ All roles executed successfully"
          - "✅ Security hardening applied"
          - "✅ Tailscale configured for secure access"
          - "✅ System validated and ready"
          - ""
          - "📱 SSH Access (via Tailscale):"
          - "   ssh {{ admin_username }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
          - ""
          - "🔄 RECOMMENDED: Reboot system to ensure all changes take effect"
          - "💻 NEXT STEP: Proceed with Docker Swarm installation"
          - ""
      tags: always

  handlers:
    - name: reboot system
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout | default(600) }}"
        connect_timeout: 30
        test_command: uptime
        msg: "Rebooting to apply system preparation changes"
      listen: "reboot system" 