version: '3.8'

services:
  # Automated Cloudflare tunnel manager - no manual config needed!
  cloudflare-manager:
    image: fhriley/cloudflare-manager:{{ cloudflare_manager_version }}
    container_name: cloudflare-manager
    restart: unless-stopped
    
    volumes:
      # Docker socket for service discovery
      - /var/run/docker.sock:/var/run/docker.sock
    
    environment:
      # Cloudflare API configuration
      - CLOUDFLARE_TUNNEL_ID={{ cloudflared_tunnel_id }}
      - CLOUDFLARE_API_KEY={{ cloudflared_api_token }}
      - CLOUDFLARE_ACCOUNT_ID={{ cloudflared_account_id }}
      
      # Automation settings
      - CLOUDFLARE_AUTO_HTTP_HOST_HEADER={{ cloudflared_auto_http_host_header | lower }}
      - CLOUDFLARE_DEFAULT_SERVICE={{ cloudflared_default_service }}
    
    networks:
      - {{ cloudflared_network_name }}
    
    labels:
      - "local.enable=true"
      - "local.description=Automated Cloudflare tunnel management"
      - "local.automated=true"

{% if cloudflared_traditional_enabled %}
  # Traditional cloudflared (fallback/manual configuration)
  cloudflared:
    image: cloudflare/cloudflared:{{ cloudflared_version }}
    container_name: cloudflared
    restart: unless-stopped
    
    volumes:
      # Tunnel credentials and configuration
      - {{ cloudflared_credentials_dir }}:/home/nonroot/.cloudflared
      - {{ cloudflared_config_dir }}/config.yml:/home/nonroot/.cloudflared/config.yml:ro
    
    command: >
      tunnel
      --config /home/nonroot/.cloudflared/config.yml
      --no-autoupdate
      --metrics {{ cloudflared_metrics }}
      run {{ cloudflared_tunnel_id }}
    
    networks:
      - {{ cloudflared_network_name }}
    
    depends_on:
      - cloudflare-manager
    
    labels:
      - "local.enable=true"
      - "local.description=Traditional Cloudflare tunnel (fallback)"
      - "local.fallback=true"
{% endif %}

networks:
  {{ cloudflared_network_name }}:
    driver: bridge
    external: true 