#!/bin/bash

# Restic Backup Monitoring Script
# Checks backup status and repository health

# Source environment configuration
source {{ restic_backup_root }}/config/restic-env

# Check backup freshness
check_backup_status() {
    if ! restic cat config >/dev/null 2>&1; then
        echo "ERROR: Repository not accessible"
        return 1
    fi
    
    local latest_snapshot_time
    latest_snapshot_time=$(restic snapshots --latest 1 --json 2>/dev/null | jq -r '.[0].time // "1970-01-01T00:00:00Z"')
    
    if [ "$latest_snapshot_time" = "1970-01-01T00:00:00Z" ]; then
        echo "WARNING: No snapshots found"
        return 1
    fi
    
    local latest_backup_timestamp current_timestamp hours_since_backup
    latest_backup_timestamp=$(date -d "$latest_snapshot_time" +%s 2>/dev/null || echo "0")
    current_timestamp=$(date +%s)
    hours_since_backup=$(( (current_timestamp - latest_backup_timestamp) / 3600 ))
    
    if [ $hours_since_backup -gt {{ restic_backup_max_age_hours | default(26) }} ]; then
        echo "WARNING: Last backup was $hours_since_backup hours ago (threshold: {{ restic_backup_max_age_hours | default(26) }}h)"
        return 1
    fi
    
    echo "OK: Last backup was $hours_since_backup hours ago"
    return 0
}

# Check repository health
check_repository_health() {
    if ! restic cat config >/dev/null 2>&1; then
        echo "ERROR: Cannot access repository"
        return 1
    fi
    
    # Check if repository size is reasonable
    local repo_size_bytes
    repo_size_bytes=$(du -sb "$RESTIC_REPOSITORY" 2>/dev/null | cut -f1 || echo "0")
    local repo_size_gb=$((repo_size_bytes / 1024 / 1024 / 1024))
    
    if [ $repo_size_gb -gt {{ restic_max_repository_size_gb | default(100) }} ]; then
        echo "WARNING: Repository size is ${repo_size_gb}GB (threshold: {{ restic_max_repository_size_gb | default(100) }}GB)"
    fi
    
    echo "OK: Repository accessible (${repo_size_gb}GB)"
    return 0
}

# Check disk space
check_disk_space() {
    local backup_disk_usage
    backup_disk_usage=$(df --output=pcent {{ restic_backup_root }} | tail -1 | tr -d ' %')
    
    if [ "$backup_disk_usage" -gt {{ restic_disk_usage_threshold | default(85) }} ]; then
        echo "WARNING: Backup disk usage is ${backup_disk_usage}% (threshold: {{ restic_disk_usage_threshold | default(85) }}%)"
        return 1
    fi
    
    echo "OK: Backup disk usage is ${backup_disk_usage}%"
    return 0
}

# Check sync readiness
check_sync_readiness() {
    if [ -f "$SYNC_MARKER_FILE" ]; then
        local marker_age
        marker_age=$(( $(date +%s) - $(stat -c %Y "$SYNC_MARKER_FILE" 2>/dev/null || echo "0") ))
        local marker_age_minutes=$((marker_age / 60))
        
        if [ $marker_age_minutes -gt 60 ]; then
            echo "WARNING: Sync marker file is ${marker_age_minutes} minutes old"
            return 1
        else
            echo "INFO: Backup/sync in progress (${marker_age_minutes} minutes)"
            return 0
        fi
    else
        echo "OK: Repository ready for sync"
        return 0
    fi
}

# Generate monitoring metrics
generate_monitoring_metrics() {
    local backup_status_code="$1"
    local repo_status_code="$2"
    local disk_status_code="$3"
    local sync_status_code="$4"
    
    # Calculate overall health score
    local overall_health=$((backup_status_code + repo_status_code + disk_status_code + sync_status_code))
    
    cat > "$METRICS_DIR/restic_monitor.prom" <<EOF
# HELP restic_monitor_backup_status Backup freshness status (1=ok, 0=warning/error)
# TYPE restic_monitor_backup_status gauge
restic_monitor_backup_status $backup_status_code

# HELP restic_monitor_repository_status Repository health status (1=ok, 0=warning/error)
# TYPE restic_monitor_repository_status gauge
restic_monitor_repository_status $repo_status_code

# HELP restic_monitor_disk_status Disk space status (1=ok, 0=warning/error)
# TYPE restic_monitor_disk_status gauge
restic_monitor_disk_status $disk_status_code

# HELP restic_monitor_sync_status Sync readiness status (1=ok, 0=warning/error)
# TYPE restic_monitor_sync_status gauge
restic_monitor_sync_status $sync_status_code

# HELP restic_monitor_overall_health Overall monitoring health (4=all ok, 0=all failed)
# TYPE restic_monitor_overall_health gauge
restic_monitor_overall_health $overall_health

# HELP restic_monitor_last_check_timestamp Unix timestamp of last monitoring check
# TYPE restic_monitor_last_check_timestamp gauge
restic_monitor_last_check_timestamp $(date +%s)
EOF
}

main() {
    echo "=== Restic Backup Monitoring $(date) ==="
    
    local backup_status=0 repo_status=0 disk_status=0 sync_status=0 overall_status=0
    
    echo "Checking backup freshness..."
    if check_backup_status; then backup_status=1; fi
    
    echo "Checking repository health..."
    if check_repository_health; then repo_status=1; fi
    
    echo "Checking disk space..."
    if check_disk_space; then disk_status=1; fi
    
    echo "Checking sync readiness..."
    if check_sync_readiness; then sync_status=1; fi
    
    # Generate metrics
    generate_monitoring_metrics "$backup_status" "$repo_status" "$disk_status" "$sync_status"
    
    overall_status=$((backup_status + repo_status + disk_status + sync_status))
    
    if [ $overall_status -eq 4 ]; then
        echo "=== All checks passed ==="
        exit 0
    else
        echo "=== Some checks failed (score: $overall_status/4) ==="
        exit 1
    fi
}

main "$@" 