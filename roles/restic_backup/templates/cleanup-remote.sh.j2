#!/bin/bash
set -euo pipefail

# Remote Cleanup Script for Synced Backups
# Called by local sync service after successful sync to free up space

# Source environment configuration
source {{ restic_backup_root }}/config/restic-env

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$BACKUP_LOG_FILE"
}

cleanup_old_snapshots() {
    log "Starting aggressive cleanup of old snapshots"
    
    # More aggressive retention for remote (since we have local copies)
    local keep_last="${1:-3}"      # Keep only last 3 snapshots
    local keep_daily="${2:-3}"     # Keep only last 3 daily snapshots
    local keep_weekly="${3:-2}"    # Keep only last 2 weekly snapshots
    local keep_monthly="${4:-1}"   # Keep only last 1 monthly snapshot
    
    log "Remote cleanup policy: last=$keep_last, daily=$keep_daily, weekly=$keep_weekly, monthly=$keep_monthly"
    
    restic forget \
        --verbose \
        --tag=docker-swarm \
        --keep-last "$keep_last" \
        --keep-daily "$keep_daily" \
        --keep-weekly "$keep_weekly" \
        --keep-monthly "$keep_monthly" \
        --prune
    
    log "Removed old snapshots and pruned repository"
}

verify_sync_completion() {
    # Check if sync completion marker exists
    local sync_complete_marker="/tmp/restic-sync-complete-$(date +%Y%m%d)"
    
    if [ ! -f "$sync_complete_marker" ]; then
        log "ERROR: Sync completion marker not found, aborting cleanup"
        return 1
    fi
    
    # Verify marker is recent (within last 2 hours)
    local marker_age=$(( $(date +%s) - $(stat -c %Y "$sync_complete_marker" 2>/dev/null || echo "0") ))
    if [ $marker_age -gt 7200 ]; then
        log "ERROR: Sync completion marker is too old (${marker_age}s), aborting cleanup"
        return 1
    fi
    
    log "Sync completion verified (marker age: ${marker_age}s)"
    return 0
}

main() {
    local start_time=$(date +%s)
    
    log "Starting remote cleanup after sync"
    
    # Only proceed if cleanup is enabled
    if [ "$CLEANUP_AFTER_SYNC" != "true" ]; then
        log "Cleanup after sync is disabled, skipping"
        exit 0
    fi
    
    # Verify repository is accessible
    if ! restic cat config >/dev/null 2>&1; then
        log "ERROR: Repository not accessible"
        exit 1
    fi
    
    # Verify sync was completed successfully
    if ! verify_sync_completion; then
        log "Sync verification failed, aborting cleanup"
        exit 1
    fi
    
    # Wait for any ongoing backup to complete
    local wait_count=0
    while [ -f "$SYNC_MARKER_FILE" ] && [ $wait_count -lt 5 ]; do
        log "Waiting for backup to complete... ($wait_count/5)"
        sleep 300
        ((wait_count++))
    done
    
    if [ -f "$SYNC_MARKER_FILE" ]; then
        log "WARNING: Backup still in progress after 25 minutes, skipping cleanup"
        exit 1
    fi
    
    # Show repository size before cleanup
    local size_before
    size_before=$(du -sh "$RESTIC_REPOSITORY" | cut -f1)
    log "Repository size before cleanup: $size_before"
    
    # Perform cleanup
    cleanup_old_snapshots {{ restic_remote_cleanup_keep_last | default(3) }} \
                          {{ restic_remote_cleanup_keep_daily | default(3) }} \
                          {{ restic_remote_cleanup_keep_weekly | default(2) }} \
                          {{ restic_remote_cleanup_keep_monthly | default(1) }}
    
    # Show repository size after cleanup
    local size_after
    size_after=$(du -sh "$RESTIC_REPOSITORY" | cut -f1)
    log "Repository size after cleanup: $size_after"
    
    # Quick integrity check
    log "Performing quick integrity check"
    restic check --read-data-subset=1%
    
    # Show remaining snapshots
    log "Remaining snapshots:"
    restic snapshots --compact | tee -a "$BACKUP_LOG_FILE"
    
    local duration=$(($(date +%s) - start_time))
    log "Remote cleanup completed in ${duration}s"
    
    # Update metrics
    cat > "$METRICS_DIR/restic_cleanup.prom" <<EOF
# HELP restic_cleanup_duration_seconds Time taken for cleanup operation
# TYPE restic_cleanup_duration_seconds gauge
restic_cleanup_duration_seconds $duration

# HELP restic_cleanup_last_success_timestamp Unix timestamp of last successful cleanup
# TYPE restic_cleanup_last_success_timestamp gauge
restic_cleanup_last_success_timestamp $(date +%s)

# HELP restic_repository_size_after_cleanup_bytes Repository size after cleanup
# TYPE restic_repository_size_after_cleanup_bytes gauge
restic_repository_size_after_cleanup_bytes $(du -sb "$RESTIC_REPOSITORY" | cut -f1)

# HELP restic_snapshots_remaining Total snapshots remaining after cleanup
# TYPE restic_snapshots_remaining gauge
restic_snapshots_remaining $(restic snapshots --json | jq '. | length')
EOF
}

# This script should only be called by the sync service
if [ "${RESTIC_SYNC_CALLER:-}" != "local-sync-service" ]; then
    log "WARNING: This script should only be called by the local sync service"
    exit 1
fi

trap 'log "Cleanup failed with error"; exit 1' ERR
main "$@" 