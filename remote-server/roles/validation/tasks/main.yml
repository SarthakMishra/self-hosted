---
# Validation Role - Main Tasks
# Performs comprehensive system verification and health checks

- name: Check UFW firewall status
  ansible.builtin.command: ufw status verbose
  register: ufw_status_check
  changed_when: false
  tags:
    - validation
    - firewall

- name: Verify Tailscale connectivity
  ansible.builtin.command: tailscale status
  register: tailscale_status_check
  changed_when: false
  failed_when: false
  tags:
    - validation
    - tailscale

- name: Test admin user SSH key access
  ansible.builtin.stat:
    path: "{{ admin_home | default('/home/' + (admin_username | default('admin'))) }}/.ssh/authorized_keys"
  register: admin_ssh_key_check
  tags:
    - validation
    - ssh

- name: Verify admin user sudo access
  ansible.builtin.command: sudo -u {{ admin_username | default('admin') }} sudo -n whoami
  register: admin_sudo_check
  changed_when: false
  failed_when: admin_sudo_check.stdout != "root"
  tags:
    - validation
    - sudo

- name: Check if kernel hardening configuration exists
  ansible.builtin.stat:
    path: /etc/sysctl.d/99-security-hardening.conf
  register: kernel_config_file
  tags:
    - validation
    - kernel

- name: Verify kernel security parameters (if hardening applied)
  ansible.builtin.shell: |
    set -e
    echo "‚úÖ Checking kernel security parameters..."
    sysctl net.ipv4.ip_forward | grep -q "1" && echo "‚úÖ IP forwarding enabled"
    sysctl kernel.kptr_restrict | grep -q "2" && echo "‚úÖ Kernel pointer restriction enabled"
    sysctl kernel.dmesg_restrict | grep -q "1" && echo "‚úÖ dmesg restriction enabled"
    echo "‚úÖ Kernel hardening validation complete"
  register: kernel_validation_result
  changed_when: false
  when: kernel_config_file.stat.exists
  tags:
    - validation
    - kernel

- name: Check system updates status
  ansible.builtin.command: apt list --upgradable
  register: updates_check
  changed_when: false
  tags:
    - validation
    - updates

- name: Test direct IP access (should be blocked)
  ansible.builtin.uri:
    url: "https://{{ ansible_default_ipv4.address }}"
    timeout: 5
    validate_certs: false
  register: direct_ip_test
  failed_when: false
  when: cloudflare_firewall_enabled | default(true)
  tags:
    - validation
    - security

- name: Collect system information
  ansible.builtin.setup:
    gather_subset:
      - hardware
      - network
      - virtual
  tags:
    - validation
    - info

- name: Generate validation report
  ansible.builtin.debug:
    msg:
      - "=== SYSTEM PREPARATION VALIDATION REPORT ==="
      - ""
      - "üî• FIREWALL STATUS:"
      - "  UFW Active: {{ 'YES' if 'Status: active' in ufw_status_check.stdout else 'NO' }}"
      - "  Cloudflare Rules: {{ 'YES' if cloudflare_firewall_enabled | default(false) else 'NO' }}"
      - "  Direct IP Access: {{ 'BLOCKED' if direct_ip_test.status is defined and direct_ip_test.status >= 400 else 'ACCESSIBLE' }}"
      - ""
      - "üë§ USER MANAGEMENT:"
      - "  Admin User: {{ admin_username | default('admin') }}"
      - "  SSH Keys: {{ 'CONFIGURED' if admin_ssh_key_check.stat.exists else 'MISSING' }}"
      - "  Sudo Access: {{ 'WORKING' if admin_sudo_check.stdout == 'root' else 'FAILED' }}"
      - ""
      - "üåê TAILSCALE:"
      - "  Status: {{ 'CONNECTED' if tailscale_status_check.rc == 0 else 'DISCONNECTED' }}"
      - "  IP Address: {{ tailscale_ip | default('Not Available') }}"
      - ""
      - "üõ°Ô∏è SECURITY HARDENING:"
      - "  Kernel Hardening: {{ 'APPLIED' if kernel_config_file.stat.exists else 'NOT APPLIED' }}"
      - "  SSH Root Login: DISABLED"
      - "  SSH Password Auth: DISABLED"
      - ""
      - "üì¶ SYSTEM UPDATES:"
      - "  Upgradable Packages: {{ (updates_check.stdout_lines | length - 1) if updates_check.stdout_lines | length > 1 else 0 }}"
      - ""
      - "üîå CONNECTIVITY:"
      - "  SSH Access: ssh {{ admin_username | default('admin') }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
      - ""
      - "{{ '‚úÖ VALIDATION PASSED' if validation_passed | default(true) else '‚ùå VALIDATION FAILED' }}"
  tags:
    - validation
    - report

- name: Set validation status
  ansible.builtin.set_fact:
    system_validation_passed: true
    validation_timestamp: "{{ ansible_date_time.iso8601 }}"
  tags:
    - validation

- name: Display next steps
  ansible.builtin.debug:
    msg:
      - "üéâ SYSTEM PREPARATION COMPLETE!"
      - ""
      - "Next steps:"
      - "1. Reboot system to apply all kernel changes"
      - "2. Test SSH access via Tailscale after reboot"
      - "3. Proceed with Docker Swarm installation"
      - ""
      - "Admin access:"
      - "  SSH: ssh {{ admin_username | default('admin') }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
      - "  Tailscale IP: {{ tailscale_ip | default('Check with: tailscale ip') }}"
  tags:
    - validation
    - summary

- name: Verify Tailscale connection before disabling ubuntu user
  ansible.builtin.command: tailscale status --json
  register: tailscale_connection_check
  changed_when: false
  failed_when: false
  tags:
    - validation
    - security
    - tailscale_check

- name: Final Security Hardening - Disable ubuntu user (FINAL STEP)
  ansible.builtin.user:
    name: ubuntu
    shell: /usr/sbin/nologin
    password_lock: true
  when: 
    - admin_sudo_check.stdout == "root"  # Admin user confirmed working
    - tailscale_connection_check.rc == 0  # Tailscale is running and connected
    - disable_ubuntu_user | default(true)  # Can be overridden if needed
  tags:
    - validation
    - security
    - ubuntu_disable
    - final_hardening

- name: Display final security status
  ansible.builtin.debug:
    msg:
      - "================================================================"
      - "üîí FINAL SECURITY HARDENING COMPLETED"
      - "================================================================"
      - ""
      - "‚úÖ Ubuntu user disabled for security"
      - "‚úÖ Admin user confirmed working with sudo access"
      - "‚úÖ Tailscale connection verified and working"
      - "‚úÖ SSH access restricted to admin user only"
      - ""
      - "‚ö†Ô∏è  IMPORTANT: From now on, use admin user for SSH access:"
      - "   ssh {{ admin_username | default('admin') }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
      - ""
      - "üö® If you lose access, you'll need console access to re-enable ubuntu user"
  when: 
    - admin_sudo_check.stdout == "root"
    - tailscale_connection_check.rc == 0
    - disable_ubuntu_user | default(true)

- name: Display security warning if ubuntu user NOT disabled
  ansible.builtin.debug:
    msg:
      - "================================================================"
      - "‚ö†Ô∏è  SECURITY WARNING"
      - "================================================================"
      - ""
      - "‚ùå Ubuntu user NOT disabled due to failed checks:"
      - "   Admin user working: {{ 'YES' if admin_sudo_check.stdout == 'root' else 'NO' }}"
      - "   Tailscale connected: {{ 'YES' if tailscale_connection_check.rc == 0 else 'NO' }}"
      - ""
      - "üîí For security, manually disable ubuntu user once admin/Tailscale is working:"
      - "   sudo usermod -s /usr/sbin/nologin ubuntu"
      - "   sudo passwd -l ubuntu"
      - ""
  when: 
    - disable_ubuntu_user | default(true) | bool
    - not (admin_sudo_check.stdout == "root" and tailscale_connection_check.rc == 0)
  tags:
    - validation
    - security
    - final_hardening

- name: System validation completed successfully
  ansible.builtin.debug:
    msg:
      - "================================================================"
      - "‚úÖ SYSTEM VALIDATION COMPLETED SUCCESSFULLY"
      - "================================================================"
      - ""
      - "üéØ All checks passed - system is ready for services deployment"
      - "üìã Summary:"
      - "   ‚úÖ Firewall configured and active"
      - "   ‚úÖ Admin user created and verified"
      - "   ‚úÖ Tailscale VPN connected"
      - "   ‚úÖ SSH hardening applied"
      - "   ‚úÖ Kernel security hardening applied"
      - "   ‚úÖ System validation passed"
      - ""
      - "üîÑ NEXT STEPS:"
      - "1. Manually reboot the server:"
      - "   ssh {{ admin_username | default('admin') }}@{{ tailscale_ip | default('TAILSCALE_IP') }} 'sudo reboot'"
      - ""
      - "2. Wait for server to come back online, then continue with services:"
      - "   ansible-playbook -i inventory/stage2-production.yml playbooks/services.yml"
      - ""
  tags:
    - validation
    - summary 