#!/bin/bash
set -euo pipefail

# Main Docker Swarm Backup Script
# Performs incremental backups with local repository and sync coordination

# Source environment configuration
source {{ restic_backup_root }}/config/restic-env

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$BACKUP_LOG_FILE"
}

# Duration calculation
duration() {
    local start_time="$1"
    local end_time=$(date +%s)
    echo "$((end_time - start_time))s"
}

# Health check notification
notify_healthcheck() {
    local status="$1"
    local url="${HEALTHCHECK_URL:-}"
    if [ -n "$url" ]; then
        if [ "$status" = "success" ]; then
            curl -fsS --max-time 10 --retry 3 "$url" >/dev/null 2>&1 || true
        else
            curl -fsS --max-time 10 --retry 3 "$url/fail" >/dev/null 2>&1 || true
        fi
    fi
}

# Generate backup metrics for monitoring
generate_metrics() {
    local backup_time="$1"
    local files_new="$2"
    local files_changed="$3"
    local data_added="$4"
    local snapshot_id="$5"
    
    cat > "$METRICS_DIR/restic_backup.prom" <<EOF
# HELP restic_backup_duration_seconds Time taken for backup operation
# TYPE restic_backup_duration_seconds gauge
restic_backup_duration_seconds $backup_time

# HELP restic_backup_files_new Number of new files in backup
# TYPE restic_backup_files_new counter
restic_backup_files_new $files_new

# HELP restic_backup_files_changed Number of changed files in backup
# TYPE restic_backup_files_changed counter
restic_backup_files_changed $files_changed

# HELP restic_backup_data_added_bytes Data added in backup
# TYPE restic_backup_data_added_bytes gauge
restic_backup_data_added_bytes $data_added

# HELP restic_backup_last_success_timestamp Unix timestamp of last successful backup
# TYPE restic_backup_last_success_timestamp gauge
restic_backup_last_success_timestamp $(date +%s)

# HELP restic_backup_status Status of last backup (1=success, 0=failure)
# TYPE restic_backup_status gauge
restic_backup_status 1

# HELP restic_backup_repository_size_bytes Current repository size
# TYPE restic_backup_repository_size_bytes gauge
restic_backup_repository_size_bytes $(du -sb "$RESTIC_REPOSITORY" | cut -f1)

# HELP restic_backup_sync_ready Repository ready for sync (1=ready, 0=not ready)
# TYPE restic_backup_sync_ready gauge
restic_backup_sync_ready 1
EOF
}

# Mark sync status
mark_sync_status() {
    local status="$1"
    case "$status" in
        "in-progress")
            touch "$SYNC_MARKER_FILE"
            ;;
        "ready")
            rm -f "$SYNC_MARKER_FILE"
            ;;
    esac
}

# Wait for ongoing sync to complete
wait_for_sync() {
    local wait_count=0
    while [ -f "$SYNC_MARKER_FILE" ] && [ $wait_count -lt 30 ]; do
        log "Waiting for sync to complete... ($wait_count/30)"
        sleep 60
        ((wait_count++))
    done
    
    if [ -f "$SYNC_MARKER_FILE" ]; then
        log "WARNING: Sync marker still present after 30 minutes, proceeding anyway"
        rm -f "$SYNC_MARKER_FILE"
    fi
}

main() {
    local start_time=$(date +%s)
    
    log "Starting Docker Swarm backup on $BACKUP_HOSTNAME ($BACKUP_NODE_TYPE)"
    
    # Check if we're on a manager node
    if ! docker info --format '{{ "{{" }}.Swarm.ControlAvailable{{ "}}" }}' 2>/dev/null | grep -q true; then
        log "Not a manager node, skipping backup"
        exit 0
    fi
    
    # Skip if not leader to avoid conflicts
    if docker node ls --format '{{ "{{" }}.ManagerStatus{{ "}}" }}' | grep -q "Leader"; then
        log "This is the leader node, running backup"
    else
        log "This is not the leader node, skipping backup"
        exit 0
    fi
    
    # Wait for any ongoing sync to complete
    wait_for_sync
    
    # Mark backup in progress
    mark_sync_status "in-progress"
    
    # Initialize repository if it doesn't exist
    if ! restic cat config >/dev/null 2>&1; then
        log "Initializing new repository"
        restic init
    fi
    
    # Perform pre-backup checks
    log "Checking Docker Swarm status"
    docker node ls >/dev/null
    docker service ls >/dev/null
    
    # Perform backup
    log "Starting incremental backup"
    backup_output=$(restic backup \
        --verbose \
        --host="$BACKUP_HOSTNAME" \
        --tag=docker-swarm \
        --tag=automatic \
        --tag="node-type:$BACKUP_NODE_TYPE" \
        --exclude-file="$BACKUP_EXCLUDES_FILE" \
        --one-file-system \
        "$DOCKER_VOLUMES_PATH" \
        "$DOCKER_COMPOSE_PATH" \
        "$DOCKER_CONFIG_PATH" 2>&1)
    
    # Extract metrics from backup output
    snapshot_id=$(echo "$backup_output" | grep "snapshot.*saved" | awk '{print $2}' || echo "unknown")
    files_new=$(echo "$backup_output" | grep "Files:" | awk '{print $2}' || echo "0")
    files_changed=$(echo "$backup_output" | grep "Files:" | awk '{print $4}' || echo "0")
    data_added_raw=$(echo "$backup_output" | grep "Added to the repository:" | awk '{print $5}' || echo "0")
    
    # Convert data to bytes
    data_added="0"
    if [[ "$data_added_raw" =~ ([0-9.]+).*GiB ]]; then
        data_added=$(echo "${BASH_REMATCH[1]} * 1073741824" | bc -l | cut -d. -f1)
    elif [[ "$data_added_raw" =~ ([0-9.]+).*MiB ]]; then
        data_added=$(echo "${BASH_REMATCH[1]} * 1048576" | bc -l | cut -d. -f1)
    elif [[ "$data_added_raw" =~ ([0-9.]+).*KiB ]]; then
        data_added=$(echo "${BASH_REMATCH[1]} * 1024" | bc -l | cut -d. -f1)
    elif [[ "$data_added_raw" =~ ([0-9.]+).*B ]]; then
        data_added="${BASH_REMATCH[1]}"
    fi
    
    backup_duration=$(($(date +%s) - start_time))
    
    # Generate metrics
    generate_metrics "$backup_duration" "${files_new:-0}" "${files_changed:-0}" "${data_added:-0}" "${snapshot_id:-unknown}"
    
    # Quick integrity check
    log "Verifying backup integrity"
    restic check --read-data-subset=2%
    
    # Mark backup complete and ready for sync
    mark_sync_status "ready"
    
    log "Backup completed successfully in $(duration $start_time)"
    log "Snapshot ID: $snapshot_id"
    log "Files: $files_new new, $files_changed changed"
    log "Data added: $data_added bytes"
    log "Repository ready for sync"
    
    notify_healthcheck "success"
}

# Error handling
trap 'log "Backup failed with error"; mark_sync_status "ready"; notify_healthcheck "failure"; exit 1' ERR

# Run main function
main "$@"