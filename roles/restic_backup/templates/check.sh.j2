#!/bin/bash
set -euo pipefail

# Restic Repository Integrity Check Script
# Performs comprehensive verification and testing

# Source environment configuration
source {{ restic_backup_root }}/config/restic-env

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$BACKUP_LOG_FILE"
}

main() {
    local start_time=$(date +%s)
    
    log "Starting comprehensive repository check"
    
    # Check if repository is accessible
    if ! restic cat config >/dev/null 2>&1; then
        log "ERROR: Repository not accessible"
        exit 1
    fi
    
    # Full repository check with data verification
    log "Performing full repository integrity check"
    restic check --read-data
    
    # Verify latest snapshot can be restored
    log "Testing restore capability"
    latest_snapshot=$(restic snapshots --latest 1 --json | jq -r '.[0].id // "none"')
    
    if [ "$latest_snapshot" != "none" ]; then
        # Create test restore directory
        test_restore_dir="/tmp/restic-restore-test-$(date +%s)"
        mkdir -p "$test_restore_dir"
        
        # Restore a small subset for testing
        log "Restoring subset of latest snapshot for verification"
        restic restore "$latest_snapshot" \
            --target "$test_restore_dir" \
            --include="$DOCKER_COMPOSE_PATH" \
            --verify
        
        # Verify restored files
        if [ -d "$test_restore_dir$DOCKER_COMPOSE_PATH" ]; then
            log "Restore test successful"
        else
            log "ERROR: Restore test failed - directory not found"
            rm -rf "$test_restore_dir"
            exit 1
        fi
        
        # Cleanup test directory
        rm -rf "$test_restore_dir"
    else
        log "WARNING: No snapshots found to test restore"
    fi
    
    # Check repository statistics
    log "Repository statistics:"
    restic stats --mode=raw-data | tee -a "$BACKUP_LOG_FILE"
    
    local duration=$(($(date +%s) - start_time))
    log "Comprehensive check completed in ${duration}s"
    
    # Update metrics
    cat > "$METRICS_DIR/restic_check.prom" <<EOF
# HELP restic_check_duration_seconds Time taken for check operation
# TYPE restic_check_duration_seconds gauge
restic_check_duration_seconds $duration

# HELP restic_check_last_success_timestamp Unix timestamp of last successful check
# TYPE restic_check_last_success_timestamp gauge
restic_check_last_success_timestamp $(date +%s)

# HELP restic_repository_healthy Repository health status (1=healthy, 0=unhealthy)
# TYPE restic_repository_healthy gauge
restic_repository_healthy 1
EOF
}

trap 'log "Check failed with error"; cat > "$METRICS_DIR/restic_check.prom" <<EOF
restic_repository_healthy 0
EOF; exit 1' ERR

main "$@" 