---
# SSH Hardening Role - Main Tasks
# Secures SSH configuration by disabling root login and password authentication

- name: Backup original SSH configuration
  ansible.builtin.copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup
    remote_src: true
    mode: '0600'
    backup: true
  tags:
    - ssh_hardening
    - backup

- name: Configure SSH security settings
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    backup: false
  loop:
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    - { regexp: '^#?UsePAM', line: 'UsePAM yes' }
    - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
    - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
    - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
    - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
    - { regexp: '^#?Protocol', line: 'Protocol 2' }
  register: ssh_config_changed
  when: ssh_disable_root | default(true) or ssh_disable_password_auth | default(true)
  notify:
    - restart ssh
  tags:
    - ssh_hardening
    - configuration

- name: Create SSH privilege separation directory
  ansible.builtin.file:
    path: /run/sshd
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags:
    - ssh_hardening
    - validation

- name: Test SSH configuration syntax
  ansible.builtin.command: sshd -t
  register: ssh_test_result
  changed_when: false
  failed_when: 
    - ssh_test_result.rc != 0
    - "'Missing privilege separation directory' not in ssh_test_result.stderr"
  tags:
    - ssh_hardening
    - validation

- name: Display SSH test results
  ansible.builtin.debug:
    msg: "SSH configuration syntax test: {{ 'PASSED' if ssh_test_result.rc == 0 else 'FAILED' }}"
  tags:
    - ssh_hardening
    - validation

- name: Create SSH security warning
  ansible.builtin.debug:
    msg:
      - "‚ö†Ô∏è  SSH SECURITY CHANGES APPLIED ‚ö†Ô∏è"
      - "Root login: {{ 'DISABLED' if ssh_disable_root else 'ENABLED' }}"
      - "Password authentication: {{ 'DISABLED' if ssh_disable_password_auth else 'ENABLED' }}"
      - "Admin user: {{ admin_username }}"
      - "Tailscale SSH access: ssh {{ admin_username }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
      - ""
      - "üîí CRITICAL: Ensure admin user SSH access works before continuing!"
  when: ssh_config_changed is changed
  tags:
    - ssh_hardening
    - warning

- name: Verify admin user can use SSH keys
  ansible.builtin.stat:
    path: "{{ admin_home | default('/home/' + (admin_username | default('admin'))) }}/.ssh/authorized_keys"
  register: admin_ssh_keys
  tags:
    - ssh_hardening
    - validation

- name: Warning if no SSH keys found for admin user
  ansible.builtin.fail:
    msg:
      - "‚ùå CRITICAL ERROR: No SSH keys found for admin user"
      - "Path checked: {{ admin_home | default('/home/' + (admin_username | default('admin'))) }}/.ssh/authorized_keys"
      - "This could result in lockout after SSH hardening"
      - "Please ensure SSH keys are properly configured"
  when: 
    - not admin_ssh_keys.stat.exists
    - ssh_disable_root | default(true)
    - ssh_disable_password_auth | default(true)
  tags:
    - ssh_hardening
    - validation

- name: Display SSH hardening summary
  ansible.builtin.debug:
    msg:
      - "SSH hardening completed successfully"
      - "Configuration file: /etc/ssh/sshd_config"
      - "Backup created: /etc/ssh/sshd_config.backup"
      - "SSH service will be restarted if configuration changed"
      - "Admin SSH keys verified: {{ admin_ssh_keys.stat.exists }}"
  tags:
    - ssh_hardening
    - summary 