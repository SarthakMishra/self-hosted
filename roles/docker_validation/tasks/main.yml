---
# Docker Validation Role - Main Tasks
# Performs comprehensive Docker installation and configuration verification

- name: Check Docker service status
  ansible.builtin.systemd:
    name: docker
  register: docker_service_status
  tags:
    - docker_validation
    - service

- name: Verify Docker daemon is running
  ansible.builtin.command: docker info --format '{{ "{{" }}.ServerVersion{{ "}}" }}'
  register: docker_daemon_check
  changed_when: false
  failed_when: docker_daemon_check.rc != 0
  tags:
    - docker_validation
    - daemon

- name: Check Docker Swarm status
  ansible.builtin.command: docker info --format '{{ "{{" }}.Swarm.LocalNodeState{{ "}}" }}'
  register: docker_swarm_status_check
  changed_when: false
  tags:
    - docker_validation
    - swarm

- name: Verify Docker networks
  ansible.builtin.command: docker network ls --format "{{ '{{' }}.Name{{ '}}' }}"
  register: docker_networks_check
  changed_when: false
  tags:
    - docker_validation
    - networks

- name: Test Docker functionality with hello-world
  ansible.builtin.command: docker run --rm hello-world
  register: docker_hello_world_validation
  changed_when: false
  become_user: docker
  tags:
    - docker_validation
    - functionality

- name: Check Docker socket permissions
  ansible.builtin.stat:
    path: /var/run/docker.sock
  register: docker_socket_permissions
  tags:
    - docker_validation
    - security

- name: Verify user permissions
  ansible.builtin.command: groups docker
  register: docker_user_groups
  changed_when: false
  tags:
    - docker_validation
    - permissions

- name: Check Docker daemon configuration
  ansible.builtin.stat:
    path: /etc/docker/daemon.json
  register: docker_daemon_config_check
  tags:
    - docker_validation
    - configuration

- name: Verify Docker service override
  ansible.builtin.stat:
    path: /etc/systemd/system/docker.service.d/override.conf
  register: docker_service_override_check
  tags:
    - docker_validation
    - configuration

- name: Check Whalewall service status
  ansible.builtin.systemd:
    name: whalewall
  register: whalewall_service_status
  failed_when: false
  when: whalewall_enabled | default(true)
  tags:
    - docker_validation
    - whalewall

- name: Check Docker cleanup script
  ansible.builtin.stat:
    path: /usr/local/bin/docker-cleanup
  register: docker_cleanup_script_check
  tags:
    - docker_validation
    - cleanup

- name: Check Docker stack directories
  ansible.builtin.stat:
    path: "{{ item }}"
  register: docker_directories_check
  loop: "{{ docker_directories }}"
  tags:
    - docker_validation
    - directories

- name: Verify Docker disk usage
  ansible.builtin.command: docker system df --format "table {{ '{{' }}.Type{{ '}}' }}\t{{ '{{' }}.TotalCount{{ '}}' }}\t{{ '{{' }}.Size{{ '}}' }}"
  register: docker_disk_usage
  changed_when: false
  tags:
    - docker_validation
    - disk_usage

- name: Generate Docker validation report
  ansible.builtin.debug:
    msg:
      - "=== DOCKER VALIDATION REPORT ==="
      - ""
      - "üê≥ DOCKER SERVICE:"
      - "  Service Status: {{ docker_service_status.status.ActiveState | default('unknown') }}"
      - "  Daemon Version: {{ docker_daemon_check.stdout | default('unknown') }}"
      - "  Socket Permissions: {{ docker_socket_permissions.stat.mode | default('unknown') }}"
      - ""
      - "üêù DOCKER SWARM:"
      - "  Swarm Status: {{ docker_swarm_status_check.stdout | default('unknown') }}"
      - "  Node Type: {{ node_type | default('unknown') }}"
      - ""
      - "üåê DOCKER NETWORKS:"
      - "  Available Networks: {{ docker_networks_check.stdout_lines | length | default(0) }}"
      - "  Expected Networks: {{ docker_networks | map(attribute='name') | join(', ') }}"
      - ""
      - "üë§ USER PERMISSIONS:"
      - "  Docker User Groups: {{ docker_user_groups.stdout | default('unknown') }}"
      - "  Admin User in Docker Group: {{ (admin_username | default('admin')) in docker_user_groups.stdout }}"
      - ""
      - "‚öôÔ∏è CONFIGURATION:"
      - "  Daemon Config: {{ 'Present' if docker_daemon_config_check.stat.exists else 'Missing' }}"
      - "  Service Override: {{ 'Present' if docker_service_override_check.stat.exists else 'Missing' }}"
      - ""
      - "üî• WHALEWALL:"
      - "  Service Status: {{ whalewall_service_status.status.ActiveState | default('Not installed') if whalewall_enabled else 'Disabled' }}"
      - ""
      - "üßπ CLEANUP & MONITORING:"
      - "  Cleanup Script: {{ 'Present' if docker_cleanup_script_check.stat.exists else 'Missing' }}"
      - "  Stack Directories: {{ docker_directories_check.results | selectattr('stat.exists') | list | length }}/{{ docker_directories | length }}"
      - ""
      - "üíæ DISK USAGE:"
      - "{{ docker_disk_usage.stdout_lines | join('\n  ') | indent(2, true) }}"
      - ""
      - "‚úÖ FUNCTIONALITY TEST:"
      - "  Hello-world: {{ 'PASSED' if docker_hello_world_validation.rc == 0 else 'FAILED' }}"
      - ""
      - "{{ '‚úÖ DOCKER VALIDATION PASSED' if docker_validation_passed | default(true) else '‚ùå DOCKER VALIDATION FAILED' }}"
  tags:
    - docker_validation
    - report

- name: Set Docker validation status
  ansible.builtin.set_fact:
    docker_validation_passed: true
    docker_validation_timestamp: "{{ ansible_date_time.iso8601 }}"
  tags:
    - docker_validation

- name: Display Docker setup summary
  ansible.builtin.debug:
    msg:
      - "üéâ DOCKER SETUP VALIDATION COMPLETE!"
      - ""
      - "Ready for production deployment:"
      - "1. Docker service running and configured"
      - "2. Swarm {{ 'initialized' if docker_swarm_status_check.stdout == 'active' else 'ready for initialization' }}"
      - "3. Networks configured and encrypted"
      - "4. Cleanup automation enabled"
      - "5. UFW/Docker integration via Whalewall"
      - ""
      - "Next steps:"
      - "1. Deploy production services (Traefik, monitoring, etc.)"
      - "2. Configure service-specific networking"
      - "3. Set up monitoring and alerting"
      - ""
      - "Management commands:"
      - "  Docker status: /usr/local/bin/docker-status"
      - "  Manual cleanup: /usr/local/bin/docker-cleanup"
      - "  Stack directory: {{ docker_stack_root }}"
  tags:
    - docker_validation
    - summary 