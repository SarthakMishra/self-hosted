---
# Complete Server Setup Playbook
# Runs system preparation, reboots, then Docker setup, then local network services

- name: Complete Server Setup
  hosts: docker_servers
  become: true
  gather_facts: false  # We'll gather facts after connection is established
  
  vars_files:
    - ../group_vars/vault.yml
    - ../group_vars/all.yml
    - ../group_vars/docker.yml
    - ../group_vars/nginx_proxy.yml
    - ../group_vars/dnsmasq.yml
    - ../group_vars/cloudflared.yml
    - ../group_vars/netdata.yml
    
  pre_tasks:
    # Dynamic Connection Detection and Setup
    - name: Detect optimal connection method
      block:
        - name: Try connecting with current inventory settings first
          ansible.builtin.setup:
          register: connection_test
          ignore_errors: true
          
        - name: Connection successful with current settings
          ansible.builtin.debug:
            msg: "✅ Connected successfully with {{ ansible_user }}@{{ ansible_host }}"
          when: connection_test is not failed
          
        - name: Try alternative connection methods if current failed
          block:
            # Try admin user with Tailscale hostname
            - name: Test admin user with Tailscale connection
              ansible.builtin.setup:
              vars:
                ansible_user: admin
                ansible_host: "{{ inventory_hostname }}.{{ tailscale_magic_dns_suffix | default('tail6d423d.ts.net') }}"
              register: admin_tailscale_test
              ignore_errors: true
              
            - name: Switch to admin user with Tailscale if successful
              ansible.builtin.set_fact:
                ansible_user: admin
                ansible_host: "{{ inventory_hostname }}.{{ tailscale_magic_dns_suffix | default('tail6d423d.ts.net') }}"
                connection_method: "admin_tailscale"
              when: admin_tailscale_test is not failed
              
            # Try ubuntu user with public IP if admin+Tailscale failed
            - name: Test ubuntu user with public IP connection
              ansible.builtin.setup:
              vars:
                ansible_user: ubuntu
                ansible_host: "{{ server_public_ip }}"
              register: ubuntu_public_test
              ignore_errors: true
              when: admin_tailscale_test is failed
              
            - name: Switch to ubuntu user with public IP if successful
              ansible.builtin.set_fact:
                ansible_user: ubuntu
                ansible_host: "{{ server_public_ip }}"
                connection_method: "ubuntu_public"
              when: 
                - admin_tailscale_test is failed
                - ubuntu_public_test is not failed
                
            # Final fallback: admin user with public IP
            - name: Test admin user with public IP connection
              ansible.builtin.setup:
              vars:
                ansible_user: admin
                ansible_host: "{{ server_public_ip }}"
              register: admin_public_test
              ignore_errors: true
              when: 
                - admin_tailscale_test is failed
                - ubuntu_public_test is failed
                
            - name: Switch to admin user with public IP if successful
              ansible.builtin.set_fact:
                ansible_user: admin
                ansible_host: "{{ server_public_ip }}"
                connection_method: "admin_public"
              when: 
                - admin_tailscale_test is failed
                - ubuntu_public_test is failed
                - admin_public_test is not failed
                
            - name: All connection methods failed
              ansible.builtin.fail:
                msg: |
                  ❌ Cannot establish SSH connection with any method:
                  - admin@{{ inventory_hostname }}.{{ tailscale_magic_dns_suffix | default('tail6d423d.ts.net') }}
                  - ubuntu@{{ server_public_ip }}
                  - admin@{{ server_public_ip }}
                  
                  Please check:
                  1. Server is running and accessible
                  2. SSH keys are correctly configured
                  3. Tailscale is configured if using magic DNS
                  4. Firewall allows SSH access from your IP
              when: 
                - admin_tailscale_test is failed
                - ubuntu_public_test is failed  
                - admin_public_test is failed
                
          when: connection_test is failed
          
        # Set connection facts based on successful method
        - name: Set connection method fact for current settings
          ansible.builtin.set_fact:
            connection_method: "current_inventory"
          when: connection_test is not failed
          
      tags: always
      
    # Now gather facts with established connection
    - name: Gather system facts
      ansible.builtin.setup:
      tags: always

    - name: Display connection status
      ansible.builtin.debug:
        msg:
          - "🔗 Connection established:"
          - "   Method: {{ connection_method | default('current_inventory') }}"
          - "   User: {{ ansible_user }}"
          - "   Host: {{ ansible_host }}"
          - "   Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
      tags: always

    - name: Display complete setup banner
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "🚀 COMPLETE SERVER SETUP"
          - "=================================================="
          - ""
          - "Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "This will:"
          - "1. System hardening and preparation"
          - "2. Reboot server"
          - "3. Docker installation and configuration"
          - "4. Nginx-proxy for local .home domains"
          - "5. DNSmasq for local DNS resolution"
          - "6. Cloudflared for secure external access"
          - "7. Netdata monitoring system"
          - ""
          - "⚠️  Server will reboot during this process"
          - "🔒 SSH access will be restricted to admin user"
          - "🌐 Tailscale will be configured for secure access"
          - ""
      tags: always

    - name: Check minimum system requirements
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_major_version | int >= 20
          - ansible_memtotal_mb >= 1024
          - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first > 5000000000
        fail_msg: "Requirements: Ubuntu 20.04+, 1GB RAM, 5GB disk space"
        success_msg: "System requirements met"
      tags: always

  tasks:
    # Phase 1: System Preparation
    - name: Run system preparation roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - system_update
        - user_management
        - tailscale
        - firewall
        - ssh_hardening
        - kernel_hardening
        - logging
        - validation
      tags:
        - system_preparation
        - phase1

    - name: Switch to secure connection method before reboot
      block:
        - name: Get Tailscale IP and Magic DNS info
          ansible.builtin.set_fact:
            tailscale_magic_dns: "{{ inventory_hostname }}.{{ tailscale_magic_dns_suffix | default('tail6d423d.ts.net') }}"
          when: tailscale_ip is defined
          
        - name: Update connection to use admin user and Tailscale after hardening
          ansible.builtin.set_fact:
            ansible_user: admin
            ansible_host: "{{ tailscale_magic_dns }}"
            connection_method: "secure_tailscale"
          when: 
            - tailscale_ip is defined
            - connection_method in ['ubuntu_public', 'admin_public']
            
        - name: Display connection switch notice
          ansible.builtin.debug:
            msg:
              - "🔄 Switching to secure connection method:"
              - "   From: {{ ansible_user }}@{{ ansible_host }}"
              - "   To: admin@{{ tailscale_magic_dns }}"
              - "   Reason: SSH hardening applied, using Tailscale for security"
          when: 
            - tailscale_ip is defined
            - connection_method in ['ubuntu_public', 'admin_public']
            
      tags:
        - system_preparation
        - phase1

    - name: Display pre-reboot status
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "✅ SYSTEM PREPARATION COMPLETED"
          - "================================================================"
          - ""
          - "System hardening complete. Rebooting server to apply changes..."
          - "Server will restart and Docker setup will continue automatically."
          - "Post-reboot connection: admin@{{ tailscale_magic_dns | default(inventory_hostname) }}"
          - ""
      tags:
        - system_preparation
        - phase1

    # Phase 2: Reboot
    - name: Reboot server to apply system changes
      ansible.builtin.reboot:
        reboot_timeout: 600
        connect_timeout: 30
        test_command: uptime
        msg: "Rebooting to apply system preparation changes"
      tags:
        - reboot
        - phase2

    - name: Wait for server to be fully ready
      ansible.builtin.wait_for_connection:
        timeout: 300
        delay: 30
      tags:
        - reboot
        - phase2

    - name: Verify server is back online
      ansible.builtin.setup:
      tags:
        - reboot
        - phase2

    - name: Display post-reboot status
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🔄 SERVER REBOOT COMPLETED"
          - "================================================================"
          - ""
          - "Server is back online. Starting Docker installation..."
          - "Connection: {{ ansible_user }}@{{ ansible_host }}"
          - ""
      tags:
        - reboot
        - phase2

    # Phase 3: Docker Setup
    - name: Run Docker installation roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - docker_installation
        - docker_configuration
        - docker_production
        - docker_validation
      tags:
        - docker_setup
        - phase3

    - name: Display Docker setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🐳 DOCKER SETUP COMPLETED"
          - "================================================================"
          - ""
          - "Docker installation complete. Setting up local networking..."
          - ""
      tags:
        - docker_setup
        - phase3

    # Phase 4: Local Network Setup (Nginx-proxy + DNSmasq)
    - name: Run local network services setup
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - nginx_proxy
        - dnsmasq
      tags:
        - local_network_setup
        - phase4

    - name: Display local network setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🌐 LOCAL NETWORK SETUP COMPLETED"
          - "================================================================"
          - ""
          - "✅ Nginx-proxy running for .{{ domain_suffix }} domains"
          - "✅ DNSmasq providing local DNS resolution"
          - ""
          - "Setting up secure external access..."
          - ""
      tags:
        - local_network_setup
        - phase4

    # Phase 5: Cloudflared Setup
    - name: Run Cloudflared tunnel setup
      ansible.builtin.include_role:
        name: cloudflared
      tags:
        - cloudflared_setup
        - phase5

    - name: Display Cloudflared setup completion
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "☁️  CLOUDFLARED TUNNEL SETUP COMPLETED"
          - "================================================================"
          - ""
          - "Cloudflared tunnel configured. Installing monitoring system..."
          - ""
      tags:
        - cloudflared_setup
        - phase5

    # Phase 6: Monitoring Setup
    - name: Run monitoring system setup
      ansible.builtin.include_role:
        name: netdata
      tags:
        - monitoring_setup
        - phase6

  post_tasks:
    - name: Complete setup finished
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🎉 COMPLETE SERVER SETUP FINISHED!"
          - "================================================================"
          - ""
          - "✅ System hardening applied"
          - "✅ Server rebooted with latest changes"
          - "✅ Docker installed and configured"
          - "✅ Nginx-proxy for local .{{ domain_suffix }} domains"
          - "✅ DNSmasq for local DNS resolution"
          - "✅ Cloudflared tunnel for external access"
          - "✅ Netdata monitoring installed"
          - "✅ Production settings applied"
          - "✅ All validations passed"
          - ""
          - "🔒 SSH Access (via Tailscale):"
          - "   ssh {{ admin_username | default('admin') }}@{{ tailscale_ip | default('TAILSCALE_IP') }}"
          - ""
          - "🔧 Management Commands:"
          - "   Docker Status: /usr/local/bin/docker-status"
          - "   Docker Cleanup: /usr/local/bin/docker-cleanup"
          - "   Stack Directory: {{ docker_stack_root }}"
          - "   Nginx-proxy Directory: {{ nginx_proxy_root_dir }}"
          - "   Cloudflared Directory: {{ cloudflared_root_dir }}"
          - ""
          - "🌐 Network Services:"
          - "   Local DNS: {{ ansible_default_ipv4.address }}:{{ dnsmasq_port }}"
          - "   External Domain: {{ cloudflared_external_domain }}"
          - ""
          - "📊 Monitoring:"
          - "   Netdata: http://{{ tailscale_ip | default('TAILSCALE_IP') }}:{{ netdata_port }}"
          - ""
          - "🚀 Your home server is ready!"
          - "   Local Access: Add VIRTUAL_HOST=service.{{ domain_suffix }} to containers"
          - "   External Access: Add cloudflare labels for automatic tunnel routing"
          - "   No ports 80/443 exposed - all external traffic via Cloudflare tunnel"
          - ""
      tags: always 