# Open WebUI Environment Configuration
# Copy this file to .env and customize for your installation

# ==============================================
# DOMAIN CONFIGURATION
# ==============================================

# The domain where Open WebUI will be accessible
# Example: chat.yourdomain.com, ai.company.com
OPENWEBUI_DOMAIN=openwebui.example.com

# ==============================================
# CORE WEBUI CONFIGURATION
# ==============================================

# Custom name for your Open WebUI instance
WEBUI_NAME=Open WebUI

# Secret key for session management (generate a secure random string)
# Generate with: openssl rand -hex 32
WEBUI_SECRET_KEY=your_secure_secret_key_here

# ==============================================
# OPEN ROUTER API CONFIGURATION
# ==============================================

# Open Router API settings for accessing multiple LLM models
# Sign up at: https://openrouter.ai/
OPENROUTER_API_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_API_KEY=your_openrouter_api_key_here

# ==============================================
# WEB SEARCH CONFIGURATION (TAVILY)
# ==============================================

# Enable web search functionality
ENABLE_WEB_SEARCH=true

# Web search engine (tavily, searxng, google, bing, brave)
WEB_SEARCH_ENGINE=tavily

# Tavily API configuration
# Sign up at: https://tavily.com/
TAVILY_API_KEY=your_tavily_api_key_here

# Web search result configuration
WEB_SEARCH_RESULT_COUNT=5
WEB_SEARCH_CONCURRENT_REQUESTS=10

# ==============================================
# USER AUTHENTICATION
# ==============================================

# Allow new user registration
# Set to false to disable public registration
ENABLE_SIGNUP=true

# Default role for new users: admin, user, pending
DEFAULT_USER_ROLE=pending

# Enable login form (set to false for SSO-only setups)
ENABLE_LOGIN_FORM=true

# ==============================================
# MODEL MANAGEMENT
# ==============================================

# Enable model filtering (restrict available models)
MODEL_FILTER_ENABLED=false

# Comma-separated list of allowed models (when filtering is enabled)
# Example: gpt-4,claude-3-sonnet,llama-2-70b
MODEL_FILTER_LIST=

# ==============================================
# FEATURE TOGGLES
# ==============================================

# Enable image generation capabilities
ENABLE_IMAGE_GENERATION=true

# Enable community sharing features
ENABLE_COMMUNITY_SHARING=false

# Extract images from PDF documents
PDF_EXTRACT_IMAGES=true

# Enable admin data export functionality
ENABLE_ADMIN_EXPORT=true

# ==============================================
# AUDIO AND SPEECH (OPTIONAL)
# ==============================================

# Speech-to-Text engine
# Options: whisper.cpp, openai-whisper, azure, google
AUDIO_STT_ENGINE=

# Text-to-Speech engine  
# Options: openai, azure, elevenlabs, coqui
AUDIO_TTS_ENGINE=

# ==============================================
# WEBHOOKS AND INTEGRATIONS (OPTIONAL)
# ==============================================

# Webhook URL for external integrations
WEBHOOK_URL=

# ==============================================
# EXAMPLE CONFIGURATIONS
# ==============================================

# For personal use:
# OPENWEBUI_DOMAIN=chat.home.example.com
# WEBUI_NAME=My AI Assistant
# ENABLE_SIGNUP=false
# DEFAULT_USER_ROLE=admin
# ENABLE_WEB_SEARCH=true

# For team/organization use:
# OPENWEBUI_DOMAIN=ai.company.com
# WEBUI_NAME=Company AI Hub
# ENABLE_SIGNUP=true
# DEFAULT_USER_ROLE=pending
# MODEL_FILTER_ENABLED=true
# MODEL_FILTER_LIST=gpt-4,claude-3-sonnet

# For public deployment:
# OPENWEBUI_DOMAIN=public-ai.example.com
# WEBUI_NAME=Public AI Chat
# ENABLE_SIGNUP=true
# DEFAULT_USER_ROLE=user
# ENABLE_COMMUNITY_SHARING=true

# ==============================================
# SECURITY NOTES
# ==============================================

# 1. NEVER commit your actual .env file to version control
# 2. Use strong, unique secret keys
# 3. Protect your API keys (Open Router, Tavily)
# 4. Consider disabling registration for private deployments
# 5. Review user roles and permissions regularly
# 6. Monitor API usage and costs
# 7. Use HTTPS only in production (handled by Traefik)

# ==============================================
# SETUP CHECKLIST
# ==============================================

# 1. Sign up for Open Router API key: https://openrouter.ai/
# 2. Sign up for Tavily API key: https://tavily.com/
# 3. Generate a secure secret key: openssl rand -hex 32
# 4. Copy this file to .env and fill in your values
# 5. Configure your domain DNS to point to your server
# 6. Deploy with: docker-compose up -d
# 7. Access at: https://your-domain.com
# 8. Create your admin account
# 9. Configure model preferences in the UI
# 10. Test web search functionality

# ==============================================
# TROUBLESHOOTING
# ==============================================

# Common issues:
# - API key errors: Check Open Router and Tavily API keys
# - Model access: Verify Open Router account credits and model permissions
# - Web search failing: Check Tavily API key and rate limits
# - Login issues: Verify WEBUI_SECRET_KEY is set correctly
# - Domain access: Check Traefik configuration and DNS settings

# Check logs:
# docker-compose logs -f openwebui

# Check Open Router models:
# curl https://openrouter.ai/api/v1/models -H "Authorization: Bearer YOUR_API_KEY" 