---
# Multi-Node Docker Setup Playbook
# Optimized for Docker Swarm cluster deployments across multiple servers

- name: Multi-Node Docker Installation and Configuration
  hosts: production
  become: true
  gather_facts: true
  serial: 3  # Process 3 nodes at a time for efficient cluster setup
  
  vars_files:
    # Include Docker configuration variables
    - ../group_vars/docker.yml
    
  vars:
    # Multi-node specific settings
    docker_swarm_enabled: true
    # Automatic user switching - use admin user for Docker phase
    ansible_user: "{{ admin_user | default('admin') }}"
    
  pre_tasks:
    - name: Ensure connection uses Tailscale hostname
      ansible.builtin.set_fact:
        ansible_host: "{{ tailscale_hostname | default(inventory_hostname) }}"
      when: tailscale_hostname is defined
      tags: always

    - name: Verify admin user connectivity
      ansible.builtin.debug:
        msg:
          - "üîê Using admin user for Docker deployment: {{ ansible_user }}"
          - "üîÑ Switched from base user ({{ base_user | default('ubuntu') }}) to admin user"
          - "üåê Using Tailscale hostname: {{ ansible_host }}"
          - "‚úÖ This happens automatically - no manual inventory changes needed"
      tags: always
    - name: Display multi-node Docker setup banner
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "üèóÔ∏è  MULTI-NODE DOCKER CLUSTER SETUP"
          - "=================================================="
          - ""
          - "Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "Node Type: {{ node_type | default('unknown') }}"
          - "Node Role: {{ swarm_role | default('unknown') }}"
          - "Traefik: {{ traefik_enabled | default(false) }}"
          - "Environment: {{ environment | default('production') }}"
          - ""
          - "üêù Building production Docker Swarm cluster"
          - "üîí Manager nodes: {{ groups['swarm_managers'] | length if groups['swarm_managers'] is defined else 0 }}"
          - "üë∑ Worker nodes: {{ groups['swarm_workers'] | length if groups['swarm_workers'] is defined else 0 }}"
          - ""
      tags: always

    - name: Verify multi-node configuration
      ansible.builtin.assert:
        that:
          - node_type in ['manager', 'worker']
          - swarm_role in ['manager', 'worker']
          - groups['swarm_managers'] is defined
        fail_msg: "Multi-node deployment requires valid cluster configuration"
        success_msg: "Multi-node configuration verified: {{ node_type }}/{{ swarm_role }}"
      tags: always

    - name: Display node-specific configuration
      ansible.builtin.debug:
        msg:
          - "üîß Node Configuration:"
          - "  Type: {{ node_type }}"
          - "  Role: {{ swarm_role }}"
          - "  Traefik: {{ traefik_enabled | default(false) }}"
          - "  Whalewall: {{ whalewall_enabled | default(true) }}"
          - "  Public Access: {{ 'YES' if traefik_enabled else 'NO' }}"
      tags: always

  roles:
    - role: docker_installation
      tags: 
        - docker_installation
        - phase1
      
    - role: docker_configuration
      tags:
        - docker_configuration
        - phase1

  post_tasks:
    - name: Manager node Docker setup checkpoint
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üö® MANAGER NODE DOCKER SETUP CHECKPOINT"
          - "================================================================"
          - ""
          - "Manager Node: {{ inventory_hostname }}"
          - "Will initialize Swarm: {{ inventory_hostname == groups['swarm_managers'][0] }}"
          - "Traefik Enabled: {{ traefik_enabled | default(false) }}"
          - ""
          - "‚ö†Ô∏è  Next phase will initialize Docker Swarm cluster"
          - "üîí Only first manager initializes, others join"
          - ""
      when: node_type == "manager"
      tags: 
        - checkpoint
        - phase2

    - name: Worker node Docker setup checkpoint  
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üë∑ WORKER NODE DOCKER SETUP CHECKPOINT"
          - "================================================================"
          - ""
          - "Worker Node: {{ inventory_hostname }}"
          - "Will join Swarm cluster after managers are ready"
          - ""
          - "‚úÖ Worker nodes provide compute capacity"
          - "‚úÖ No public access (secure by design)"
          - ""
      when: node_type == "worker"
      tags: 
        - checkpoint
        - phase2

# Initialize Swarm on first manager only
- name: Initialize Docker Swarm on First Manager
  hosts: swarm_managers[0]
  become: true
  gather_facts: false
  
  vars_files:
    - ../group_vars/docker.yml
    
  roles:
    - role: docker_swarm
      tags:
        - docker_swarm
        - phase2
        
    - role: docker_networks
      tags:
        - docker_networks
        - phase2

  post_tasks:
    - name: Store Swarm tokens for other nodes
      ansible.builtin.set_fact:
        swarm_manager_join_token: "{{ swarm_manager_token.stdout }}"
        swarm_worker_join_token: "{{ swarm_worker_token.stdout }}"
        swarm_manager_ip: "{{ ansible_default_ipv4.address }}"
      delegate_to: localhost
      run_once: true
      when: swarm_manager_token.stdout is defined

# Join additional managers to Swarm
- name: Join Additional Managers to Swarm
  hosts: swarm_managers[1:]
  become: true
  gather_facts: false
  
  vars_files:
    - ../group_vars/docker.yml
    
  tasks:
    - name: Wait for first manager to initialize Swarm
      ansible.builtin.pause:
        seconds: 30
      run_once: true

    - name: Join Swarm as manager
      ansible.builtin.command: >
        docker swarm join --token {{ hostvars['localhost']['swarm_manager_join_token'] }}
        {{ hostvars['localhost']['swarm_manager_ip'] }}:2377
      register: manager_join_result
      when: hostvars['localhost']['swarm_manager_join_token'] is defined

    - name: Verify manager join
      ansible.builtin.command: docker node ls
      register: manager_node_check
      changed_when: false

# Join workers to Swarm
- name: Join Workers to Swarm
  hosts: swarm_workers
  become: true
  gather_facts: false
  
  vars_files:
    - ../group_vars/docker.yml
    
  tasks:
    - name: Wait for managers to be ready
      ansible.builtin.pause:
        seconds: 45
      run_once: true

    - name: Join Swarm as worker
      ansible.builtin.command: >
        docker swarm join --token {{ hostvars['localhost']['swarm_worker_join_token'] }}
        {{ hostvars['localhost']['swarm_manager_ip'] }}:2377
      register: worker_join_result
      when: hostvars['localhost']['swarm_worker_join_token'] is defined

# Complete production setup on all nodes
- name: Complete Production Setup
  hosts: production
  become: true
  gather_facts: false
  
  vars_files:
    - ../group_vars/docker.yml
    
  roles:
    - role: docker_production
      tags:
        - docker_production
        - phase3
        
    - role: whalewall
      tags:
        - whalewall
        - phase3
      when: whalewall_enabled | default(true)
        
    - role: docker_validation
      tags:
        - docker_validation
        - phase4
        
    - role: docker_services
      tags:
        - docker_services
        - services
        - phase5
      when: deploy_docker_services | default(true) and node_type in ['single', 'manager'] and (traefik_enabled | default(false))
        
    - role: restic_backup
      tags:
        - restic_backup
        - backup
        - phase6
      when: deploy_restic_backup | default(true) and node_type in ['single', 'manager']

  post_tasks:
    - name: Multi-node Docker setup complete
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üéâ MULTI-NODE DOCKER SETUP COMPLETED!"
          - "================================================================"
          - ""
          - "‚úÖ Node {{ inventory_hostname }} configured successfully"
          - "‚úÖ Type: {{ node_type }} | Role: {{ swarm_role }}"
          - "‚úÖ Docker Swarm cluster operational"
          - "{{ '‚úÖ Traefik enabled for public access' if traefik_enabled else '‚úÖ Internal node (no public access)' }}"
          - ""
          - "üê≥ Cluster Status:"
          - "  Total Nodes: {{ groups['production'] | length }}"
          - "  Manager Nodes: {{ groups['swarm_managers'] | length }}"
          - "  Worker Nodes: {{ groups['swarm_workers'] | length }}"
          - ""
          - "üìã Next Steps for Cluster:"
          - "1. Verify cluster health: docker node ls (on any manager)"
          - "2. Deploy Traefik on designated manager"
          - "3. Deploy monitoring across cluster"
          - "4. Deploy application services with placement constraints"
          - ""
      tags: always

# Final cluster summary
- name: Multi-Node Cluster Summary
  hosts: swarm_managers[0]
  gather_facts: false
  
  tasks:
    - name: Display final cluster status
      ansible.builtin.command: docker node ls
      register: final_cluster_status
      changed_when: false

    - name: Display cluster deployment summary
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üèóÔ∏è  DOCKER SWARM CLUSTER DEPLOYMENT COMPLETE"
          - "================================================================"
          - ""
          - "üìä Final Cluster Status:"
          - "{{ final_cluster_status.stdout_lines | join('\n  ') | indent(2, true) }}"
          - ""
          - "üöÄ CLUSTER READY FOR PRODUCTION SERVICES!"
          - ""
          - "Management Commands (run on any manager):"
          - "  docker node ls                    # List all nodes"
          - "  docker service ls                 # List running services"
          - "  docker network ls --filter scope=swarm  # List overlay networks"
          - "  docker stack ls                   # List deployed stacks"
          - ""
      tags: always 