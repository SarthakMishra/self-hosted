---
# Docker Swarm Node Maintenance
# Manage node availability for maintenance operations

- name: Node Maintenance Operations
  hosts: swarm_managers[0]
  become: true
  gather_facts: false
  
  vars:
    # Set via command line: -e node_action=drain -e target_node=worker1
    node_action: "{{ node_action | default('active') }}"  # drain, active, pause
    target_node: "{{ target_node | mandatory }}"
    
  pre_tasks:
    - name: Verify node action
      ansible.builtin.assert:
        that:
          - node_action in ['drain', 'active', 'pause']
        fail_msg: "node_action must be 'drain', 'active', or 'pause'"
        success_msg: "Node action: {{ node_action }} for {{ target_node }}"

    - name: Check if target node exists
      ansible.builtin.command: docker node inspect {{ target_node }} --format "{{.Spec.Availability}}"
      register: current_status
      changed_when: false

  tasks:
    - name: Display current node status
      ansible.builtin.debug:
        msg:
          - "Target Node: {{ target_node }}"
          - "Current Status: {{ current_status.stdout }}"
          - "Requested Action: {{ node_action }}"

    - name: Drain node for maintenance
      ansible.builtin.command: docker node update --availability drain {{ target_node }}
      when: node_action == "drain"
      register: drain_result

    - name: Activate node after maintenance
      ansible.builtin.command: docker node update --availability active {{ target_node }}
      when: node_action == "active"
      register: activate_result

    - name: Pause node (stop new tasks)
      ansible.builtin.command: docker node update --availability pause {{ target_node }}
      when: node_action == "pause"
      register: pause_result

    - name: Wait for services to migrate (if draining)
      ansible.builtin.pause:
        seconds: 30
      when: node_action == "drain"

    - name: Check service distribution after action
      ansible.builtin.command: docker service ls --format "table {{.NAME}}\t{{.REPLICAS}}"
      register: service_status
      changed_when: false

    - name: Check node status after action
      ansible.builtin.command: docker node ls
      register: node_status
      changed_when: false

    - name: Display results
      ansible.builtin.debug:
        msg:
          - "Node maintenance {{ node_action }} completed for {{ target_node }}"
          - ""
          - "Node Status:"
          - "{{ node_status.stdout_lines }}"
          - ""
          - "Service Status:" 
          - "{{ service_status.stdout_lines }}" 