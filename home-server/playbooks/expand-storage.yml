---
# MergerFS Pool Expansion Playbook
# Adds new drives to existing MergerFS pool with zero downtime

- name: Expand MergerFS Storage Pool
  hosts: docker_servers
  become: true
  gather_facts: true
  
  vars_files:
    - ../group_vars/vault.yml
    - ../group_vars/all.yml
    - ../group_vars/mergerfs.yml
    
  pre_tasks:
    - name: Display expansion banner
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "📈 MERGERFS STORAGE POOL EXPANSION"
          - "================================================================"
          - ""
          - "This playbook will help you add new drives to your existing"
          - "MergerFS storage pool with ZERO DOWNTIME."
          - ""
          - "✅ Existing pool remains mounted and accessible"
          - "✅ No data loss or interruption to services"
          - "✅ Interactive drive selection"
          - "✅ Automatic capacity expansion"
          - ""
          - "Target server: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - ""
      tags: always

    - name: Check if MergerFS is installed
      ansible.builtin.command: which mergerfs
      register: mergerfs_installed
      failed_when: false
      changed_when: false
      tags: always

    - name: Fail if MergerFS not installed
      ansible.builtin.fail:
        msg: |
          ❌ MergerFS is not installed on this system!
          
          Please run the main setup playbook first:
          ansible-playbook -i inventory/hosts.yml playbooks/setup.yml
      when: mergerfs_installed.rc != 0
      tags: always

    - name: Check if MergerFS pool exists
      ansible.builtin.stat:
        path: "{{ mergerfs_pool_path }}"
      register: pool_exists
      tags: always

    - name: Fail if MergerFS pool doesn't exist
      ansible.builtin.fail:
        msg: |
          ❌ MergerFS pool not found at {{ mergerfs_pool_path }}!
          
          Please run the main setup playbook first:
          ansible-playbook -i inventory/hosts.yml playbooks/setup.yml
      when: not pool_exists.stat.exists
      tags: always

    - name: Check current pool status
      ansible.builtin.shell: "df -h {{ mergerfs_pool_path }}"
      register: current_pool_status
      changed_when: false
      tags: always

    - name: Get current pool capacity
      ansible.builtin.shell: "df -h {{ mergerfs_pool_path }} | tail -1 | awk '{print $2}'"
      register: current_capacity
      changed_when: false
      tags: always

    - name: Display current pool status
      ansible.builtin.debug:
        msg:
          - "📊 CURRENT MERGERFS POOL STATUS"
          - "================================"
          - ""
          - "{{ current_pool_status.stdout_lines | join('\n') }}"
          - ""
          - "Current total capacity: {{ current_capacity.stdout }}"
          - "Pool mounted at: {{ mergerfs_pool_path }}"
          - ""
      tags: always

  tasks:
    - name: Find existing MergerFS drives from fstab
      ansible.builtin.shell: |
        grep -E "{{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}[0-9]+" /etc/fstab | awk '{print $2}' | sort
      register: existing_mount_points
      changed_when: false
      tags:
        - detection

    - name: Get next available drive number
      ansible.builtin.set_fact:
        next_drive_number: |
          {%- set existing = existing_mount_points.stdout_lines | map('regex_replace', '^.*' + mergerfs_drive_prefix, '') | map('int') | sort -%}
          {%- if existing | length == 0 -%}
          1
          {%- else -%}
          {{ (existing | max) + 1 }}
          {%- endif -%}
      tags:
        - detection

    - name: Get existing drive devices from fstab
      ansible.builtin.shell: |
        grep -E "{{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}[0-9]+" /etc/fstab | awk '{print $1}' | sed 's/UUID=//' | sort
      register: existing_uuids
      changed_when: false
      tags:
        - detection

    - name: Get device names for existing UUIDs
      ansible.builtin.shell: "blkid -U {{ item }}"
      register: existing_devices
      loop: "{{ existing_uuids.stdout_lines }}"
      changed_when: false
      failed_when: false
      tags:
        - detection

    - name: Build list of existing device names
      ansible.builtin.set_fact:
        existing_device_names: "{{ existing_devices.results | selectattr('stdout', 'defined') | map(attribute='stdout') | map('regex_replace', '/dev/([a-z]+)[0-9]*', '\\1') | list }}"
      tags:
        - detection

    - name: Detect all available block devices (excluding existing)
      ansible.builtin.shell: |
        lsblk -J -o NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE,UUID | jq -r '
          .blockdevices[] | 
          select(.type == "disk") | 
          select(.name | test("^({{ mergerfs_exclude_devices | join("|") }})"; "i") | not) |
          select(.name | test("^({{ existing_device_names | join("|") }})$") | not) |
          select((.mountpoint // "") | test("^({{ mergerfs_exclude_mount_points | join("|") }})$") | not) |
          select((.size | rtrimstr("G") | tonumber) >= {{ mergerfs_min_drive_size_gb }}) |
          "\(.name)|\(.size)|\(.mountpoint // "")|\(.fstype // "")|\(.uuid // "")"
        '
      register: available_new_drives_raw
      changed_when: false
      tags:
        - detection

    - name: Parse available new drives information
      ansible.builtin.set_fact:
        available_new_drives: "{{ available_new_drives_raw.stdout_lines | map('split', '|') | map('list') | list }}"
      when: available_new_drives_raw.stdout_lines | length > 0
      tags:
        - detection

    - name: Display existing pool information
      ansible.builtin.debug:
        msg:
          - "🔍 MERGERFS POOL ANALYSIS"
          - "========================="
          - ""
          - "Existing drives in pool:"
          - "{% for mount in existing_mount_points.stdout_lines %}"
          - "  {{ mount }}"
          - "{% endfor %}"
          - ""
          - "Next drive number: {{ mergerfs_drive_prefix }}{{ next_drive_number }}"
          - ""
          - "Available new drives:"
          - "{% if available_new_drives is defined and available_new_drives | length > 0 %}"
          - "{% for drive in available_new_drives %}"
          - "{{ loop.index }}. /dev/{{ drive[0] }} - {{ drive[1] }} ({{ 'Mounted at ' + drive[2] if drive[2] else 'Unmounted' }}) {{ '- ' + drive[3] if drive[3] else '' }}"
          - "{% endfor %}"
          - "{% else %}"
          - "❌ No new drives available for expansion"
          - "{% endif %}"
          - ""
      tags:
        - detection

    - name: Check if new drives are available
      ansible.builtin.fail:
        msg: |
          ❌ No new drives found for pool expansion!
          
          All suitable drives are already part of the MergerFS pool.
          To add more storage:
          1. Install additional drives in your server
          2. Ensure drives are > {{ mergerfs_min_drive_size_gb }}GB
          3. Run this playbook again
      when: available_new_drives is not defined or available_new_drives | length == 0
      tags:
        - validation

    - name: Interactive new drive selection
      ansible.builtin.pause:
        prompt: |
          
          ================================================================
          📦 SELECT NEW DRIVES FOR POOL EXPANSION
          ================================================================
          
          Your current MergerFS pool has {{ existing_mount_points.stdout_lines | length }} drives.
          
          Available NEW drives to add:
          {% for drive in available_new_drives %}
          {{ loop.index }}. /dev/{{ drive[0] }} - {{ drive[1] }} ({{ 'Mounted at ' + drive[2] if drive[2] else 'Unmounted' }}) {{ '- ' + drive[3] if drive[3] else '' }}
          {% endfor %}
          
          ⚠️  EXPANSION PROCESS:
          • Selected drives will be formatted (data destroyed)
          • Drives will be added to existing pool
          • Pool capacity will increase immediately
          • NO downtime - existing data remains accessible
          
          Enter drive numbers separated by commas (e.g., 1,2):
          Enter 'all' to select all available drives:
          Enter 'cancel' to abort expansion:
      register: new_drive_selection
      when: mergerfs_interactive_mode | default(true)
      tags:
        - interactive

    - name: Cancel expansion if requested
      ansible.builtin.meta: end_play
      when: 
        - mergerfs_interactive_mode | default(true)
        - new_drive_selection.user_input | lower == 'cancel'
      tags:
        - interactive

    - name: Process new drive selection
      ansible.builtin.set_fact:
        selected_new_drive_indices: |
          {%- if new_drive_selection.user_input | lower == 'all' -%}
          {{ range(1, available_new_drives | length + 1) | list }}
          {%- else -%}
          {{ new_drive_selection.user_input.split(',') | map('trim') | map('int') | list }}
          {%- endif -%}
      when: mergerfs_interactive_mode | default(true)
      tags:
        - interactive

    - name: Validate new drive selection
      ansible.builtin.assert:
        that:
          - item | int > 0
          - item | int <= (available_new_drives | length)
        fail_msg: "Invalid drive selection: {{ item }}. Must be between 1 and {{ available_new_drives | length }}"
      loop: "{{ selected_new_drive_indices | default([]) }}"
      when: mergerfs_interactive_mode | default(true)
      tags:
        - validation

    - name: Build selected new drives list
      ansible.builtin.set_fact:
        selected_new_drives: |
          {%- set drives = [] -%}
          {%- for index in selected_new_drive_indices | default([]) -%}
          {%- set _ = drives.append(available_new_drives[index | int - 1]) -%}
          {%- endfor -%}
          {{ drives }}
      when: mergerfs_interactive_mode | default(true)
      tags:
        - selection

    - name: Display selected new drives
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "✅ DRIVES SELECTED FOR POOL EXPANSION"
          - "================================================================"
          - ""
          - "NEW drives to add to pool:"
          - "{% for drive in selected_new_drives | default([]) %}"
          - "{{ loop.index }}. /dev/{{ drive[0] }} - {{ drive[1] }} {{ '(' + drive[3] + ')' if drive[3] else '(will be formatted)' }}"
          - "{% endfor %}"
          - ""
          - "Additional capacity: ~{{ selected_new_drives | map(attribute=1) | map('regex_replace', '[^0-9.]', '') | map('float') | sum | round(1) }}GB"
          - ""
          - "Pool expansion: {{ existing_mount_points.stdout_lines | length }} → {{ (existing_mount_points.stdout_lines | length) + (selected_new_drives | length) }} drives"
          - ""
      when: selected_new_drives is defined and selected_new_drives | length > 0
      tags:
        - confirmation

    - name: Check if new drives need formatting
      ansible.builtin.set_fact:
        new_drives_need_formatting: "{{ selected_new_drives | selectattr(3, 'equalto', '') | list }}"
      when: selected_new_drives is defined
      tags:
        - formatting

    - name: Confirm destructive formatting operation
      ansible.builtin.pause:
        prompt: |
          
          ⚠️  WARNING: DESTRUCTIVE OPERATION
          ================================================================
          
          The following NEW drives will be FORMATTED (ALL DATA WILL BE LOST):
          {% for drive in new_drives_need_formatting | default([]) %}
          - /dev/{{ drive[0] }} ({{ drive[1] }})
          {% endfor %}
          
          ✅ YOUR EXISTING POOL DATA IS SAFE - no existing drives affected
          
          This operation is IRREVERSIBLE and will destroy data on NEW drives only!
          
          Type 'yes' to continue or 'no' to cancel:
      register: format_confirmation
      when: 
        - mergerfs_confirm_destructive | default(true)
        - new_drives_need_formatting is defined
        - new_drives_need_formatting | length > 0
      tags:
        - confirmation

    - name: Cancel if formatting not confirmed
      ansible.builtin.fail:
        msg: "❌ Pool expansion cancelled - formatting not confirmed"
      when:
        - format_confirmation is defined
        - format_confirmation.user_input | lower != 'yes'
      tags:
        - safety

    - name: Create partitions on selected new drives
      ansible.builtin.shell: |
        if ! fdisk -l /dev/{{ item[0] }} | grep -q "/dev/{{ item[0] }}1"; then
          echo "Creating partition on /dev/{{ item[0] }}"
          echo -e "n\np\n1\n\n\nw" | fdisk /dev/{{ item[0] }}
          sleep 2
        fi
      loop: "{{ new_drives_need_formatting | default([]) }}"
      when: new_drives_need_formatting is defined and new_drives_need_formatting | length > 0
      tags:
        - partitioning

    - name: Format new drives with XFS filesystem
      ansible.builtin.filesystem:
        fstype: "{{ mergerfs_filesystem }}"
        dev: "/dev/{{ item[0] }}1"
        force: true
      loop: "{{ new_drives_need_formatting | default([]) }}"
      when: new_drives_need_formatting is defined and new_drives_need_formatting | length > 0
      tags:
        - formatting

    - name: Get UUIDs of all new drive partitions
      ansible.builtin.shell: "blkid -s UUID -o value /dev/{{ item[0] }}1"
      register: new_drive_uuids
      loop: "{{ selected_new_drives | default([]) }}"
      changed_when: false
      tags:
        - uuid

    - name: Create mount points for new drives
      ansible.builtin.file:
        path: "{{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}{{ (next_drive_number | int) + (loop.index0) }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop: "{{ selected_new_drives | default([]) }}"
      tags:
        - mountpoints

    - name: Add new drive mounts to fstab
      ansible.builtin.mount:
        path: "{{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}{{ (next_drive_number | int) + (loop.index0) }}"
        src: "UUID={{ item.stdout }}"
        fstype: "{{ mergerfs_filesystem }}"
        opts: "{{ mergerfs_mount_opts }}"
        dump: "0"
        passno: "2"
        state: present
      loop: "{{ new_drive_uuids.results | default([]) }}"
      when: new_drive_uuids is defined
      tags:
        - fstab

    - name: Mount new drives individually
      ansible.builtin.mount:
        path: "{{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}{{ (next_drive_number | int) + (loop.index0) }}"
        state: mounted
      loop: "{{ selected_new_drives | default([]) }}"
      tags:
        - mounting

    - name: Remount MergerFS pool to include new drives (ZERO DOWNTIME)
      block:
        - name: Check current pool mount
          ansible.builtin.shell: "mount | grep {{ mergerfs_pool_path }}"
          register: current_mount
          changed_when: false

        - name: Remount pool with new drives included
          ansible.builtin.shell: |
            # This is a zero-downtime operation
            # MergerFS will automatically detect new drives matching the pattern
            mount -o remount {{ mergerfs_pool_path }}
          register: remount_result

        - name: Verify remount was successful
          ansible.builtin.shell: "mount | grep {{ mergerfs_pool_path }}"
          register: new_mount
          changed_when: false

        - name: Display remount status
          ansible.builtin.debug:
            msg:
              - "🔄 POOL REMOUNT STATUS"
              - "====================="
              - ""
              - "Before: {{ current_mount.stdout }}"
              - "After:  {{ new_mount.stdout }}"
              - ""
      tags:
        - remounting

    - name: Set ownership of expanded pool
      ansible.builtin.file:
        path: "{{ mergerfs_pool_path }}"
        owner: "{{ mergerfs_pool_owner }}"
        group: "{{ mergerfs_pool_group }}"
        mode: "{{ mergerfs_pool_mode }}"
        recurse: false
      tags:
        - permissions

    - name: Create test file for expansion verification
      ansible.builtin.copy:
        content: "MergerFS expansion test file created on {{ ansible_date_time.iso8601 }}"
        dest: "{{ mergerfs_pool_path }}/expansion_test_{{ ansible_date_time.epoch }}.txt"
        owner: "{{ mergerfs_pool_owner }}"
        group: "{{ mergerfs_pool_group }}"
        mode: "0644"
      tags:
        - testing

    - name: Verify expanded pool capacity
      ansible.builtin.shell: "df -h {{ mergerfs_pool_path }}"
      register: expanded_pool_capacity
      changed_when: false
      tags:
        - verification

    - name: Check all drives in expanded pool
      ansible.builtin.shell: "df -h {{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}*"
      register: all_drives_status
      changed_when: false
      tags:
        - verification

    - name: Verify test file distribution
      ansible.builtin.shell: "find {{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}* -name 'expansion_test_*.txt' 2>/dev/null || true"
      register: test_file_location
      changed_when: false
      tags:
        - verification

    - name: Calculate capacity increase
      ansible.builtin.set_fact:
        capacity_added: "{{ selected_new_drives | map(attribute=1) | map('regex_replace', '[^0-9.]', '') | map('float') | sum | round(1) }}"
      when: selected_new_drives is defined
      tags:
        - calculation

  post_tasks:
    - name: Display expansion completion summary
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "🎉 MERGERFS POOL EXPANSION COMPLETED!"
          - "================================================================"
          - ""
          - "✅ Zero Downtime: Pool remained accessible during expansion"
          - "✅ Drives Added: {{ selected_new_drives | length if selected_new_drives is defined else 0 }}"
          - "✅ Capacity Added: ~{{ capacity_added | default(0) }}GB"
          - "✅ Total Drives: {{ (existing_mount_points.stdout_lines | length) + (selected_new_drives | length if selected_new_drives is defined else 0) }}"
          - ""
          - "📊 EXPANDED POOL STATUS:"
          - "{{ expanded_pool_capacity.stdout_lines | join('\n') | indent(2, true) }}"
          - ""
          - "💾 ALL DRIVES IN POOL:"
          - "{{ all_drives_status.stdout_lines | join('\n') | indent(2, true) }}"
          - ""
          - "{% if test_file_location is defined and test_file_location.stdout %}"
          - "🧪 Test File Location: {{ test_file_location.stdout }}"
          - "{% endif %}"
          - ""
          - "🔧 POOL MANAGEMENT:"
          - "   Check status: df -h {{ mergerfs_pool_path }}"
          - "   View all drives: df -h {{ mergerfs_mount_base }}/{{ mergerfs_drive_prefix }}*"
          - "   Balance pool: mergerfs.balance {{ mergerfs_pool_path }}"
          - ""
          - "🚀 Your storage pool has been expanded successfully!"
          - "   Files will automatically distribute across all drives"
          - "   No service interruption occurred during expansion"
          - "   Run balancing if you want to redistribute existing files"
          - ""
      tags: always 