---
# Scale Docker Swarm - Add Manager Nodes
# Adds new manager nodes to existing Docker Swarm cluster

- name: Prepare New Manager Nodes
  hosts: new_managers
  become: true
  gather_facts: true
  serial: 1  # Add managers one at a time for safety
  
  vars_files:
    - ../group_vars/docker.yml
    
  pre_tasks:
    - name: Ensure connection uses Tailscale hostname
      ansible.builtin.set_fact:
        ansible_host: "{{ tailscale_hostname | default(inventory_hostname) }}"
      when: tailscale_hostname is defined
      tags: always

    - name: Verify new manager configuration
      ansible.builtin.assert:
        that:
          - node_type == "manager"
          - swarm_role == "manager"
        fail_msg: "Nodes must be configured as manager type"
        success_msg: "Manager node configuration verified"

    - name: Check current manager count
      ansible.builtin.command: docker node ls --filter role=manager --format "{{.Hostname}}"
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      register: current_managers
      changed_when: false

    - name: Ensure odd number of managers
      ansible.builtin.assert:
        that:
          - (current_managers.stdout_lines | length + groups['new_managers'] | length) <= 7
          - (current_managers.stdout_lines | length + groups['new_managers'] | length) % 2 == 1
        fail_msg: "Total managers must be odd number (1,3,5,7) for HA consensus"
        success_msg: "Manager count will be {{ current_managers.stdout_lines | length + groups['new_managers'] | length }} (valid)"

  roles:
    - role: system_prep
      tags: [prep, system]
    - role: admin_user  
      tags: [prep, user]
    - role: tailscale
      tags: [prep, tailscale]
    - role: firewall
      tags: [prep, security]
    - role: ssh_hardening
      tags: [prep, security]
    - role: docker_install
      tags: [docker, install]
    - role: docker_maintenance
      tags: [docker, maintenance]

- name: Get Swarm Join Token
  hosts: swarm_managers[0]
  become: true
  gather_facts: false
  
  tasks:
    - name: Get manager join token
      ansible.builtin.command: docker swarm join-token manager -q
      register: manager_token
      changed_when: false

    - name: Get manager Tailscale IP
      ansible.builtin.command: tailscale ip -4
      register: manager_tailscale_ip
      changed_when: false

    - name: Store join information
      ansible.builtin.set_fact:
        swarm_manager_token: "{{ manager_token.stdout }}"
        swarm_manager_ip: "{{ manager_tailscale_ip.stdout }}"
      delegate_to: localhost
      run_once: true

- name: Join Managers to Swarm
  hosts: new_managers
  become: true
  gather_facts: false
  serial: 1  # One manager at a time
  
  tasks:
    - name: Test Tailscale connectivity to existing manager
      ansible.builtin.command: tailscale ping {{ groups['swarm_managers'][0] }}
      changed_when: false

    - name: Join Swarm as manager
      ansible.builtin.command: >
        docker swarm join --token {{ hostvars['localhost']['swarm_manager_token'] }}
        {{ hostvars['localhost']['swarm_manager_ip'] }}:2377
      register: join_result

    - name: Wait for manager to be ready
      ansible.builtin.pause:
        seconds: 30

    - name: Label new manager node
      ansible.builtin.command: >
        docker node update --label-add role=manager
        --label-add environment={{ environment | default('production') }}
        --label-add tailscale-ip={{ ansible_facts['tailscale_ip'] | default('unknown') }}
        {{ inventory_hostname }}
      delegate_to: "{{ groups['swarm_managers'][0] }}"

    - name: Verify manager status
      ansible.builtin.command: docker node inspect {{ inventory_hostname }} --format "{{.ManagerStatus.Reachability}}"
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      register: manager_status
      retries: 5
      delay: 10
      until: manager_status.stdout == "reachable"

- name: Verify Scaling Success
  hosts: swarm_managers[0]
  gather_facts: false
  
  tasks:
    - name: Check cluster status
      ansible.builtin.command: docker node ls
      register: cluster_status
      changed_when: false

    - name: Check Raft consensus
      ansible.builtin.command: docker system info --format "{{.Swarm.Cluster.Spec.Raft}}"
      register: raft_status
      changed_when: false

    - name: Display scaling results
      ansible.builtin.debug:
        msg:
          - "Manager nodes added successfully!"
          - "Updated cluster status:"
          - "{{ cluster_status.stdout_lines }}"
          - ""
          - "Raft consensus status:"
          - "{{ raft_status.stdout }}" 