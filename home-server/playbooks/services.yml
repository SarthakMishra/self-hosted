---
# Services Playbook
# Docker installation and services setup
# Run with: ansible-playbook -i inventory/stage3-tailscale.yml playbooks/services.yml

- name: Deploy Docker and Services
  hosts: production_servers
  become: true
  gather_facts: true
  
  vars_files:
    - ../group_vars/vault.yml
    - ../group_vars/all.yml
    - ../group_vars/docker.yml
    - ../group_vars/nginx_proxy.yml
    - ../group_vars/dnsmasq.yml
    - ../group_vars/cloudflared.yml
    - ../group_vars/netdata.yml
    
  pre_tasks:
    - name: Display services setup banner
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "üê≥ DOCKER AND SERVICES DEPLOYMENT"
          - "=================================================="
          - ""
          - "Target: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "User: {{ ansible_user }} (via Tailscale: {{ vault_production_host }})"
          - ""
          - "This will deploy:"
          - "1. Docker installation and configuration"
          - "2. Nginx-proxy for local .{{ domain_suffix }} domains"
          - "3. DNSmasq for local DNS resolution"
          - "4. Cloudflared tunnel for secure external access"
          - "5. Netdata monitoring system"
          - ""
          - "üéØ Result: Complete Docker infrastructure and services"
          - ""
          - "‚ö†Ô∏è  Prerequisites: System must be rebooted after Stage 2"
          - "   Ensure system-setup.yml completed and server rebooted"
          - ""
      tags: always

  tasks:
    # Phase 1: Docker Installation
    - name: Display Docker setup phase
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üê≥ PHASE 1: DOCKER INSTALLATION"
          - "================================================================"
          - ""
          - "Installing and configuring Docker for containerized services..."
          - ""
      tags:
        - docker_setup

    - name: Run Docker installation roles
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - docker_installation
        - docker_configuration
        - docker_production
        - docker_validation
      tags:
        - docker_setup

    - name: Display Docker setup completion
      ansible.builtin.debug:
        msg:
          - "‚úÖ Docker installation completed"
          - "   Docker daemon running and configured"
          - "   Production settings applied"
          - ""
      tags:
        - docker_setup

    # Phase 2: Local Network Setup
    - name: Display networking setup phase
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üåê PHASE 2: LOCAL NETWORKING SETUP"
          - "================================================================"
          - ""
          - "Setting up nginx-proxy and DNSmasq for local .{{ domain_suffix }} domains..."
          - ""
      tags:
        - networking_setup

    - name: Run local network services setup
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - nginx_proxy
        - dnsmasq
      tags:
        - networking_setup
        - local_network_setup

    - name: Display networking setup completion
      ansible.builtin.debug:
        msg:
          - "‚úÖ Local networking setup completed"
          - "   Nginx-proxy: Running for .{{ domain_suffix }} domains"
          - "   DNSmasq: Local DNS resolution on port {{ dnsmasq_port }}"
          - ""
      tags:
        - networking_setup

    # Phase 3: External Access Setup
    - name: Display external access setup phase
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "‚òÅÔ∏è  PHASE 3: EXTERNAL ACCESS SETUP"
          - "================================================================"
          - ""
          - "Setting up Cloudflared tunnel for secure external access..."
          - ""
      tags:
        - external_access_setup

    - name: Run Cloudflared tunnel setup
      ansible.builtin.include_role:
        name: cloudflared
      tags:
        - external_access_setup
        - cloudflared_setup

    - name: Display external access setup completion
      ansible.builtin.debug:
        msg:
          - "‚úÖ External access setup completed"
          - "   Cloudflared tunnel: {{ cloudflared_external_domain }}"
          - "   Secure external access configured"
          - ""
      tags:
        - external_access_setup

    # Phase 4: Monitoring Setup
    - name: Display monitoring setup phase
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üìä PHASE 4: MONITORING SETUP"
          - "================================================================"
          - ""
          - "Installing Netdata monitoring system..."
          - ""
      tags:
        - monitoring_setup

    - name: Run monitoring system setup
      ansible.builtin.include_role:
        name: netdata
      tags:
        - monitoring_setup
        - netdata_setup

    - name: Display monitoring setup completion
      ansible.builtin.debug:
        msg:
          - "‚úÖ Monitoring setup completed"
          - "   Netdata: http://{{ vault_production_host }}:{{ netdata_port }}"
          - ""
      tags:
        - monitoring_setup

  post_tasks:
    - name: Services deployment completed
      ansible.builtin.debug:
        msg:
          - "================================================================"
          - "üéâ DOCKER AND SERVICES DEPLOYMENT COMPLETED!"
          - "================================================================"
          - ""
          - "‚úÖ ALL COMPONENTS DEPLOYED:"
          - ""
          - "üê≥ Docker Infrastructure:"
          - "   ‚úÖ Docker daemon installed and configured"
          - "   ‚úÖ Production settings applied"
          - ""
          - "üåê Local Networking:"
          - "   ‚úÖ Nginx-proxy for local .{{ domain_suffix }} domains"
          - "   ‚úÖ DNSmasq for local DNS resolution"
          - ""
          - "‚òÅÔ∏è  External Access:"
          - "   ‚úÖ Cloudflared tunnel for external access"
          - ""
          - "üìä Monitoring:"
          - "   ‚úÖ Netdata monitoring system"
          - ""
          - "================================================================"
          - "üîó ACCESS YOUR SERVICES:"
          - "================================================================"
          - ""
          - "üåê Web Services:"
          - "   Local: http://service.{{ domain_suffix }}"
          - "   External: https://service.{{ cloudflared_external_domain }}"
          - ""
          - "üìä Monitoring:"
          - "   Netdata: http://{{ vault_production_host }}:{{ netdata_port }}"
          - ""
          - "üîß DNS Configuration:"
          - "   Set your router/device DNS to: {{ ansible_default_ipv4.address }}"
          - "   DNSmasq port: {{ dnsmasq_port }}"
          - ""
          - "================================================================"
          - "üîß MANAGEMENT COMMANDS:"
          - "================================================================"
          - ""
          - "üê≥ Docker Services:"
          - "   Status: /usr/local/bin/docker-status"
          - "   Cleanup: /usr/local/bin/docker-cleanup"
          - "   Directory: {{ docker_stack_root | default('/opt/docker') }}"
          - ""
          - "üåê Network Services:"
          - "   Nginx-proxy: docker logs nginx-proxy"
          - "   DNSmasq: systemctl status dnsmasq"
          - "   Cloudflared: systemctl status cloudflared"
          - ""
          - "üìä Monitoring:"
          - "   Netdata: systemctl status netdata"
          - "   Web UI: http://{{ vault_production_host }}:{{ netdata_port }}"
          - ""
          - "================================================================"
          - "üöÄ YOUR DOCKER SERVICES ARE READY!"
          - ""
          - "Deploy any containerized service with automatic:"
          - "‚Ä¢ Local .{{ domain_suffix }} domain access"
          - "‚Ä¢ Secure external access via Cloudflare tunnel"
          - "‚Ä¢ Real-time monitoring and alerting"
          - ""
      tags: always 