---
# Scale Docker Swarm - Add Worker Nodes
# Adds new worker nodes to existing Docker Swarm cluster

- name: Prepare New Worker Nodes
  hosts: new_workers
  become: true
  gather_facts: true
  serial: 2
  
  vars_files:
    - ../group_vars/docker.yml
    
  pre_tasks:
    - name: Ensure connection uses Tailscale hostname
      ansible.builtin.set_fact:
        ansible_host: "{{ tailscale_hostname | default(inventory_hostname) }}"
      when: tailscale_hostname is defined
      tags: always

    - name: Verify new worker configuration
      ansible.builtin.assert:
        that:
          - node_type == "worker"
          - swarm_role == "worker"
        fail_msg: "Nodes must be configured as worker type"
        success_msg: "Worker node configuration verified"

  roles:
    - role: system_prep
      tags: [prep, system]
    - role: admin_user  
      tags: [prep, user]
    - role: tailscale
      tags: [prep, tailscale]
    - role: firewall
      tags: [prep, security]
    - role: ssh_hardening
      tags: [prep, security]
    - role: docker_install
      tags: [docker, install]
    - role: docker_maintenance
      tags: [docker, maintenance]

- name: Get Swarm Join Token
  hosts: swarm_managers[0]
  become: true
  gather_facts: false
  
  tasks:
    - name: Get worker join token
      ansible.builtin.command: docker swarm join-token worker -q
      register: worker_token
      changed_when: false

    - name: Get manager Tailscale IP
      ansible.builtin.command: tailscale ip -4
      register: manager_tailscale_ip
      changed_when: false

    - name: Store join information
      ansible.builtin.set_fact:
        swarm_worker_token: "{{ worker_token.stdout }}"
        swarm_manager_ip: "{{ manager_tailscale_ip.stdout }}"
      delegate_to: localhost
      run_once: true

- name: Join Workers to Swarm
  hosts: new_workers
  become: true
  gather_facts: false
  
  tasks:
    - name: Test Tailscale connectivity to manager
      ansible.builtin.command: tailscale ping {{ groups['swarm_managers'][0] }}
      changed_when: false

    - name: Join Swarm as worker
      ansible.builtin.command: >
        docker swarm join --token {{ hostvars['localhost']['swarm_worker_token'] }}
        {{ hostvars['localhost']['swarm_manager_ip'] }}:2377
      register: join_result

    - name: Label new worker node
      ansible.builtin.command: >
        docker node update --label-add role=worker
        --label-add environment={{ environment | default('production') }}
        --label-add tailscale-ip={{ ansible_facts['tailscale_ip'] | default('unknown') }}
        {{ inventory_hostname }}
      delegate_to: "{{ groups['swarm_managers'][0] }}"

- name: Verify Scaling Success
  hosts: swarm_managers[0]
  gather_facts: false
  
  tasks:
    - name: Check cluster status
      ansible.builtin.command: docker node ls
      register: cluster_status
      changed_when: false

    - name: Display scaling results
      ansible.builtin.debug:
        msg:
          - "Worker nodes added successfully!"
          - "Updated cluster status:"
          - "{{ cluster_status.stdout_lines }}" 